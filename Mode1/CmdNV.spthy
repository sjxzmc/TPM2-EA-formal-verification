theory PBS begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: CkSig/2, H/1, PK/1, Sig/2, fst/1, nvh/0, pair/2, pcrh/0,
           snd/1, zero/0
equations:
    CkSig(Sig(m, k), PK(k)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) 0:
   [ ] --[ Init( ) ]-> [ State_0( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___NV___nvh__zero0:
   [ State_0( ) ] --[ Insert( <'NV', nvh>, zero ) ]-> [ State_01( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PCRV___pcrh__zero01:
   [ State_01( ) ]
  --[ Insert( <'PCRV', pcrh>, zero ) ]->
   [ State_011( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___pcrUpdateCounter___pcrh___zero_011:
   [ State_011( ) ]
  --[ Insert( <'pcrUpdateCounter', pcrh>, 'zero' ) ]->
   [ State_0111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep0111:
   [ State_0111( ) ] --> [ !State_01111( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111:
   [ !State_01111( ) ] --> [ State_011111( ), State_011112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111:
   [ State_011111( ) ] --> [ State_0111111( ), State_0111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111:
   [ State_0111111( ) ] --> [ State_01111111( ), State_01111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111111:
   [ State_01111111( ) ]
  -->
   [ State_011111111( ), State_011111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111111:
   [ State_011111111( ) ]
  -->
   [ State_0111111111( ), State_0111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111111:
   [ State_0111111111( ) ]
  -->
   [ State_01111111111( ), State_01111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111111111:
   [ State_01111111111( ) ]
  -->
   [ State_011111111111( ), State_011111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111111111:
   [ State_011111111111( ) ]
  -->
   [ State_0111111111111( ), State_0111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111111111:
   [ State_0111111111111( ) ]
  -->
   [ State_01111111111111( ), State_01111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111111111111:
   [ State_01111111111111( ) ]
  -->
   [ State_011111111111111( ), State_011111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111111111111:
   [ State_011111111111111( ) ]
  -->
   [ State_0111111111111111( ), State_0111111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111111111111:
   [ State_0111111111111111( ) ]
  -->
   [ State_01111111111111111( ), State_01111111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111111111111111:
   [ State_01111111111111111( ) ]
  -->
   [ State_011111111111111111( ), State_011111111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111111111111111:
   [ State_011111111111111111( ) ]
  -->
   [ State_0111111111111111111( ), State_0111111111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111111111111111:
   [ State_0111111111111111111( ) ]
  -->
   [ State_01111111111111111111( ), State_01111111111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par01111111111111111111:
   [ State_01111111111111111111( ) ]
  -->
   [ State_011111111111111111111( ), State_011111111111111111112( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par011111111111111111111:
   [ State_011111111111111111111( ) ]
  -->
   [ State_0111111111111111111111( ), State_0111111111111111111112( )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par0111111111111111111111:
   [ State_0111111111111111111111( ) ]
  -->
   [
   State_01111111111111111111111( ), State_01111111111111111111112( )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___NewObj___ap_01111111111111111111111:
   [ State_01111111111111111111111( ), In( <'NewObj', ap> ) ]
  -->
   [ State_011111111111111111111111( ap, 'NewObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_h011111111111111111111111:
   [ State_011111111111111111111111( ap, 'NewObj' ), Fr( h ) ]
  -->
   [ State_0111111111111111111111111( h, ap, 'NewObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_CreateObj_h__ap_0111111111111111111111111:
   [ State_0111111111111111111111111( h, ap, 'NewObj' ) ]
  --[ Event( ), CreateObj( h, ap ) ]->
   [ State_01111111111111111111111111( h, ap, 'NewObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111111111111111111111111:
   [ State_01111111111111111111111111( h, ap, 'NewObj' ), Fr( ~lock4 )
   ]
  --[ Lock( ~lock4, h ) ]->
   [ State_011111111111111111111111111( ~lock4, h, ap, 'NewObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___AuthP___h__ap011111111111111111111111111:
   [ State_011111111111111111111111111( ~lock4, h, ap, 'NewObj' ) ]
  --[ Insert( <'AuthP', h>, ap ) ]->
   [ State_0111111111111111111111111111( ~lock4, h, ap, 'NewObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_h0111111111111111111111111111:
   [ State_0111111111111111111111111111( ~lock4, h, ap, 'NewObj' ) ]
  -->
   [
   Out( h ),
   State_01111111111111111111111111111( ~lock4, h, ap, 'NewObj' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111111111111111111111111:
   [ State_01111111111111111111111111111( ~lock4, h, ap, 'NewObj' ) ]
  --[ Unlock( ~lock4, h ) ]->
   [ State_011111111111111111111111111111( ~lock4, h, ap, 'NewObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___startSession__01111111111111111111112:
   [ State_01111111111111111111112( ), In( 'startSession' ) ]
  -->
   [ State_011111111111111111111121( 'startSession' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_h011111111111111111111121:
   [ State_011111111111111111111121( 'startSession' ), Fr( h ) ]
  -->
   [ State_0111111111111111111111211( h, 'startSession' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_nt0111111111111111111111211:
   [ State_0111111111111111111111211( h, 'startSession' ), Fr( nt ) ]
  -->
   [ State_01111111111111111111112111( nt, h, 'startSession' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111111111111111111112111:
   [
   State_01111111111111111111112111( nt, h, 'startSession' ),
   Fr( ~lock16 )
   ]
  --[ Lock( ~lock16, h ) ]->
   [
   State_011111111111111111111121111( ~lock16, nt, h, 'startSession' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_SessionBind_nt__h_011111111111111111111121111:
   [
   State_011111111111111111111121111( ~lock16, nt, h, 'startSession' )
   ]
  --[ Event( ), SessionBind( nt, h ) ]->
   [
   State_0111111111111111111111211111( ~lock16, nt, h, 'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__zero0111111111111111111111211111:
   [
   State_0111111111111111111111211111( ~lock16, nt, h, 'startSession'
   )
   ]
  --[ Insert( <'PolD', h>, zero ) ]->
   [
   State_01111111111111111111112111111( ~lock16, nt, h, 'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___cpHash___h__zero01111111111111111111112111111:
   [
   State_01111111111111111111112111111( ~lock16, nt, h, 'startSession'
   )
   ]
  --[ Insert( <'cpHash', h>, zero ) ]->
   [
   State_011111111111111111111121111111( ~lock16, nt, h,
                                         'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___nameHash___h__zero011111111111111111111121111111:
   [
   State_011111111111111111111121111111( ~lock16, nt, h,
                                         'startSession'
   )
   ]
  --[ Insert( <'nameHash', h>, zero ) ]->
   [
   State_0111111111111111111111211111111( ~lock16, nt, h,
                                          'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___commandCode___h__zero0111111111111111111111211111111:
   [
   State_0111111111111111111111211111111( ~lock16, nt, h,
                                          'startSession'
   )
   ]
  --[ Insert( <'commandCode', h>, zero ) ]->
   [
   State_01111111111111111111112111111111( ~lock16, nt, h,
                                           'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___commandLocality___h__zero01111111111111111111112111111111:
   [
   State_01111111111111111111112111111111( ~lock16, nt, h,
                                           'startSession'
   )
   ]
  --[ Insert( <'commandLocality', h>, zero ) ]->
   [
   State_011111111111111111111121111111111( ~lock16, nt, h,
                                            'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isPPRequired___h___CLEAR_011111111111111111111121111111111:
   [
   State_011111111111111111111121111111111( ~lock16, nt, h,
                                            'startSession'
   )
   ]
  --[ Insert( <'isPPRequired', h>, 'CLEAR' ) ]->
   [
   State_0111111111111111111111211111111111( ~lock16, nt, h,
                                             'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isAuthValueNeeded___h___CLEAR_0111111111111111111111211111111111:
   [
   State_0111111111111111111111211111111111( ~lock16, nt, h,
                                             'startSession'
   )
   ]
  --[ Insert( <'isAuthValueNeeded', h>, 'CLEAR' ) ]->
   [
   State_01111111111111111111112111111111111( ~lock16, nt, h,
                                              'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isPasswordNeeded___h___CLEAR_01111111111111111111112111111111111:
   [
   State_01111111111111111111112111111111111( ~lock16, nt, h,
                                              'startSession'
   )
   ]
  --[ Insert( <'isPasswordNeeded', h>, 'CLEAR' ) ]->
   [
   State_011111111111111111111121111111111111( ~lock16, nt, h,
                                               'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___pcrUC___h___zero_011111111111111111111121111111111111:
   [
   State_011111111111111111111121111111111111( ~lock16, nt, h,
                                               'startSession'
   )
   ]
  --[ Insert( <'pcrUC', h>, 'zero' ) ]->
   [
   State_0111111111111111111111211111111111111( ~lock16, nt, h,
                                                'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___NonceTPM___h__nt0111111111111111111111211111111111111:
   [
   State_0111111111111111111111211111111111111( ~lock16, nt, h,
                                                'startSession'
   )
   ]
  --[ Insert( <'NonceTPM', h>, nt ) ]->
   [
   State_01111111111111111111112111111111111111( ~lock16, nt, h,
                                                 'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___checkNVWritten___h___CLEAR_01111111111111111111112111111111111111:
   [
   State_01111111111111111111112111111111111111( ~lock16, nt, h,
                                                 'startSession'
   )
   ]
  --[ Insert( <'checkNVWritten', h>, 'CLEAR' ) ]->
   [
   State_011111111111111111111121111111111111111( ~lock16, nt, h,
                                                  'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___nvWrittenState___h__zero011111111111111111111121111111111111111:
   [
   State_011111111111111111111121111111111111111( ~lock16, nt, h,
                                                  'startSession'
   )
   ]
  --[ Insert( <'nvWrittenState', h>, zero ) ]->
   [
   State_0111111111111111111111211111111111111111( ~lock16, nt, h,
                                                   'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out__h__nt_0111111111111111111111211111111111111111:
   [
   State_0111111111111111111111211111111111111111( ~lock16, nt, h,
                                                   'startSession'
   )
   ]
  -->
   [
   Out( <h, nt> ),
   State_01111111111111111111112111111111111111111( ~lock16, nt, h,
                                                    'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111111111111111112111111111111111111:
   [
   State_01111111111111111111112111111111111111111( ~lock16, nt, h,
                                                    'startSession'
   )
   ]
  --[ Unlock( ~lock16, h ) ]->
   [
   State_011111111111111111111121111111111111111111( ~lock16, nt, h,
                                                     'startSession'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___UseObj___hObj__hS_0111111111111111111112:
   [ State_0111111111111111111112( ), In( <'UseObj', hObj, hS> ) ]
  -->
   [ State_01111111111111111111121( hS, hObj, 'UseObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_hS01111111111111111111121:
   [
   State_01111111111111111111121( hS, hObj, 'UseObj' ), Fr( ~lock29 )
   ]
  --[ Lock( ~lock29, hS ) ]->
   [ State_011111111111111111111211( ~lock29, hS, hObj, 'UseObj' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_hObj011111111111111111111211:
   [
   State_011111111111111111111211( ~lock29, hS, hObj, 'UseObj' ),
   Fr( ~lock28 )
   ]
  --[ Lock( ~lock28, hObj ) ]->
   [
   State_0111111111111111111112111( ~lock28, ~lock29, hS, hObj,
                                    'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_pcrh0111111111111111111112111:
   [
   State_0111111111111111111112111( ~lock28, ~lock29, hS, hObj,
                                    'UseObj'
   ),
   Fr( ~lock27 )
   ]
  --[ Lock( ~lock27, pcrh ) ]->
   [
   State_01111111111111111111121111( ~lock27, ~lock28, ~lock29, hS,
                                     hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_nvh01111111111111111111121111:
   [
   State_01111111111111111111121111( ~lock27, ~lock28, ~lock29, hS,
                                     hObj, 'UseObj'
   ),
   Fr( ~lock26 )
   ]
  --[ Lock( ~lock26, nvh ) ]->
   [
   State_011111111111111111111211111( ~lock26, ~lock27, ~lock28,
                                      ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___AuthP___hObj__as_ap011111111111111111111211111:
   [
   State_011111111111111111111211111( ~lock26, ~lock27, ~lock28,
                                      ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'AuthP', hObj>, ap ) ]->
   [
   State_0111111111111111111112111111( ap, ~lock26, ~lock27, ~lock28,
                                       ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___AuthP___hObj__as_ap011111111111111111111211111:
   [
   State_011111111111111111111211111( ~lock26, ~lock27, ~lock28,
                                      ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'AuthP', hObj> ) ]->
   [
   State_0111111111111111111112111112( ~lock26, ~lock27, ~lock28,
                                       ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___cpHash___hS__as_cph0111111111111111111112111111:
   [
   State_0111111111111111111112111111( ap, ~lock26, ~lock27, ~lock28,
                                       ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'cpHash', hS>, cph ) ]->
   [
   State_01111111111111111111121111111( cph, ap, ~lock26, ~lock27,
                                        ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___cpHash___hS__as_cph0111111111111111111112111111:
   [
   State_0111111111111111111112111111( ap, ~lock26, ~lock27, ~lock28,
                                       ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'cpHash', hS> ) ]->
   [
   State_01111111111111111111121111112( ap, ~lock26, ~lock27, ~lock28,
                                        ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___nameHash___hS__as_nmh01111111111111111111121111111:
   [
   State_01111111111111111111121111111( cph, ap, ~lock26, ~lock27,
                                        ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'nameHash', hS>, nmh ) ]->
   [
   State_011111111111111111111211111111( nmh, cph, ap, ~lock26,
                                         ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___nameHash___hS__as_nmh01111111111111111111121111111:
   [
   State_01111111111111111111121111111( cph, ap, ~lock26, ~lock27,
                                        ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'nameHash', hS> ) ]->
   [
   State_011111111111111111111211111112( cph, ap, ~lock26, ~lock27,
                                         ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___commandCode___hS__as_cc011111111111111111111211111111:
   [
   State_011111111111111111111211111111( nmh, cph, ap, ~lock26,
                                         ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'commandCode', hS>, cc ) ]->
   [
   State_0111111111111111111112111111111( cc, nmh, cph, ap, ~lock26,
                                          ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___commandCode___hS__as_cc011111111111111111111211111111:
   [
   State_011111111111111111111211111111( nmh, cph, ap, ~lock26,
                                         ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'commandCode', hS> ) ]->
   [
   State_0111111111111111111112111111112( nmh, cph, ap, ~lock26,
                                          ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___commandLocality___hS__as_Loc0111111111111111111112111111111:
   [
   State_0111111111111111111112111111111( cc, nmh, cph, ap, ~lock26,
                                          ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'commandLocality', hS>, Loc ) ]->
   [
   State_01111111111111111111121111111111( Loc, cc, nmh, cph, ap,
                                           ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___commandLocality___hS__as_Loc0111111111111111111112111111111:
   [
   State_0111111111111111111112111111111( cc, nmh, cph, ap, ~lock26,
                                          ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'commandLocality', hS> ) ]->
   [
   State_01111111111111111111121111111112( cc, nmh, cph, ap, ~lock26,
                                           ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___isPPRequired___hS__as_PP01111111111111111111121111111111:
   [
   State_01111111111111111111121111111111( Loc, cc, nmh, cph, ap,
                                           ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'isPPRequired', hS>, PP ) ]->
   [
   State_011111111111111111111211111111111( PP, Loc, cc, nmh, cph, ap,
                                            ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___isPPRequired___hS__as_PP01111111111111111111121111111111:
   [
   State_01111111111111111111121111111111( Loc, cc, nmh, cph, ap,
                                           ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'isPPRequired', hS> ) ]->
   [
   State_011111111111111111111211111111112( Loc, cc, nmh, cph, ap,
                                            ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___isAuthValueNeeded___hS__as_AV011111111111111111111211111111111:
   [
   State_011111111111111111111211111111111( PP, Loc, cc, nmh, cph, ap,
                                            ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'isAuthValueNeeded', hS>, AV ) ]->
   [
   State_0111111111111111111112111111111111( AV, PP, Loc, cc, nmh,
                                             cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                             'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___isAuthValueNeeded___hS__as_AV011111111111111111111211111111111:
   [
   State_011111111111111111111211111111111( PP, Loc, cc, nmh, cph, ap,
                                            ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'isAuthValueNeeded', hS> ) ]->
   [
   State_0111111111111111111112111111111112( PP, Loc, cc, nmh, cph,
                                             ap, ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                             'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___isPasswordNeeded___hS__as_PD0111111111111111111112111111111111:
   [
   State_0111111111111111111112111111111111( AV, PP, Loc, cc, nmh,
                                             cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                             'UseObj'
   )
   ]
  --[ IsIn( <'isPasswordNeeded', hS>, PD ) ]->
   [
   State_01111111111111111111121111111111111( PD, AV, PP, Loc, cc,
                                              nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS,
                                              hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___isPasswordNeeded___hS__as_PD0111111111111111111112111111111111:
   [
   State_0111111111111111111112111111111111( AV, PP, Loc, cc, nmh,
                                             cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                             'UseObj'
   )
   ]
  --[ IsNotSet( <'isPasswordNeeded', hS> ) ]->
   [
   State_01111111111111111111121111111111112( AV, PP, Loc, cc, nmh,
                                              cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                              'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___checkNVWritten___hS__as_NW01111111111111111111121111111111111:
   [
   State_01111111111111111111121111111111111( PD, AV, PP, Loc, cc,
                                              nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS,
                                              hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'checkNVWritten', hS>, NW ) ]->
   [
   State_011111111111111111111211111111111111( NW, PD, AV, PP, Loc,
                                               cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                               hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___checkNVWritten___hS__as_NW01111111111111111111121111111111111:
   [
   State_01111111111111111111121111111111111( PD, AV, PP, Loc, cc,
                                              nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS,
                                              hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'checkNVWritten', hS> ) ]->
   [
   State_011111111111111111111211111111111112( PD, AV, PP, Loc, cc,
                                               nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29, hS,
                                               hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___nvWrittenState___hS__as_WS011111111111111111111211111111111111:
   [
   State_011111111111111111111211111111111111( NW, PD, AV, PP, Loc,
                                               cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                               hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'nvWrittenState', hS>, WS ) ]->
   [
   State_0111111111111111111112111111111111111( WS, NW, PD, AV, PP,
                                                Loc, cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___nvWrittenState___hS__as_WS011111111111111111111211111111111111:
   [
   State_011111111111111111111211111111111111( NW, PD, AV, PP, Loc,
                                               cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                               hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'nvWrittenState', hS> ) ]->
   [
   State_0111111111111111111112111111111111112( NW, PD, AV, PP, Loc,
                                                cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___NV___nvh__as_nv0111111111111111111112111111111111111:
   [
   State_0111111111111111111112111111111111111( WS, NW, PD, AV, PP,
                                                Loc, cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'NV', nvh>, nv ) ]->
   [
   State_01111111111111111111121111111111111111( nv, WS, NW, PD, AV,
                                                 PP, Loc, cc, nmh, cph, ap, ~lock26, ~lock27,
                                                 ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___NV___nvh__as_nv0111111111111111111112111111111111111:
   [
   State_0111111111111111111112111111111111111( WS, NW, PD, AV, PP,
                                                Loc, cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'NV', nvh> ) ]->
   [
   State_01111111111111111111121111111111111112( WS, NW, PD, AV, PP,
                                                 Loc, cc, nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                 ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PCRV___pcrh__as_pcrv01111111111111111111121111111111111111:
   [
   State_01111111111111111111121111111111111111( nv, WS, NW, PD, AV,
                                                 PP, Loc, cc, nmh, cph, ap, ~lock26, ~lock27,
                                                 ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'PCRV', pcrh>, pcrv ) ]->
   [
   State_011111111111111111111211111111111111111( pcrv, nv, WS, NW,
                                                  PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                  ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PCRV___pcrh__as_pcrv01111111111111111111121111111111111111:
   [
   State_01111111111111111111121111111111111111( nv, WS, NW, PD, AV,
                                                 PP, Loc, cc, nmh, cph, ap, ~lock26, ~lock27,
                                                 ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'PCRV', pcrh> ) ]->
   [
   State_011111111111111111111211111111111111112( nv, WS, NW, PD, AV,
                                                  PP, Loc, cc, nmh, cph, ap, ~lock26, ~lock27,
                                                  ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___pcrUpdateCounter___pcrh__as_pc011111111111111111111211111111111111111:
   [
   State_011111111111111111111211111111111111111( pcrv, nv, WS, NW,
                                                  PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                  ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'pcrUpdateCounter', pcrh>, pc ) ]->
   [
   State_0111111111111111111112111111111111111111( pc, pcrv, nv, WS,
                                                   NW, PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                   ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___pcrUpdateCounter___pcrh__as_pc011111111111111111111211111111111111111:
   [
   State_011111111111111111111211111111111111111( pcrv, nv, WS, NW,
                                                  PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                  ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'pcrUpdateCounter', pcrh> ) ]->
   [
   State_0111111111111111111112111111111111111112( pcrv, nv, WS, NW,
                                                   PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                   ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___pcrUC___hS__as_pcS0111111111111111111112111111111111111111:
   [
   State_0111111111111111111112111111111111111111( pc, pcrv, nv, WS,
                                                   NW, PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                   ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsIn( <'pcrUC', hS>, pcS ) ]->
   [
   State_01111111111111111111121111111111111111111( pcS, pc, pcrv, nv,
                                                    WS, NW, PD, AV, PP, Loc, cc, nmh, cph, ap,
                                                    ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                                    'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___pcrUC___hS__as_pcS0111111111111111111112111111111111111111:
   [
   State_0111111111111111111112111111111111111111( pc, pcrv, nv, WS,
                                                   NW, PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                   ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ IsNotSet( <'pcrUC', hS> ) ]->
   [
   State_01111111111111111111121111111111111111112( pc, pcrv, nv, WS,
                                                    NW, PD, AV, PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                    ~lock27, ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___hS__as_pd01111111111111111111121111111111111111111:
   [
   State_01111111111111111111121111111111111111111( pcS, pc, pcrv, nv,
                                                    WS, NW, PD, AV, PP, Loc, cc, nmh, cph, ap,
                                                    ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                                    'UseObj'
   )
   ]
  --[ IsIn( <'PolD', hS>, pd ) ]->
   [
   State_011111111111111111111211111111111111111111( pd, pcS, pc,
                                                     pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                     cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                     hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___hS__as_pd01111111111111111111121111111111111111111:
   [
   State_01111111111111111111121111111111111111111( pcS, pc, pcrv, nv,
                                                    WS, NW, PD, AV, PP, Loc, cc, nmh, cph, ap,
                                                    ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                                    'UseObj'
   )
   ]
  --[ IsNotSet( <'PolD', hS> ) ]->
   [
   State_011111111111111111111211111111111111111112( pcS, pc, pcrv,
                                                     nv, WS, NW, PD, AV, PP, Loc, cc, nmh, cph, ap,
                                                     ~lock26, ~lock27, ~lock28, ~lock29, hS, hObj,
                                                     'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_nvh011111111111111111111211111111111111111111:
   [
   State_011111111111111111111211111111111111111111( pd, pcS, pc,
                                                     pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                     cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                     hS, hObj, 'UseObj'
   )
   ]
  --[ Unlock( ~lock26, nvh ) ]->
   [
   State_0111111111111111111112111111111111111111111( pd, pcS, pc,
                                                      pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                      cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                      hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_pcrh0111111111111111111112111111111111111111111:
   [
   State_0111111111111111111112111111111111111111111( pd, pcS, pc,
                                                      pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                      cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                      hS, hObj, 'UseObj'
   )
   ]
  --[ Unlock( ~lock27, pcrh ) ]->
   [
   State_01111111111111111111121111111111111111111111( pd, pcS, pc,
                                                       pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                       cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                       hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_hObj01111111111111111111121111111111111111111111:
   [
   State_01111111111111111111121111111111111111111111( pd, pcS, pc,
                                                       pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                       cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                       hS, hObj, 'UseObj'
   )
   ]
  --[ Unlock( ~lock28, hObj ) ]->
   [
   State_011111111111111111111211111111111111111111111( pd, pcS, pc,
                                                        pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                        cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                        hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_hS011111111111111111111211111111111111111111111:
   [
   State_011111111111111111111211111111111111111111111( pd, pcS, pc,
                                                        pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                        cph, ap, ~lock26, ~lock27, ~lock28, ~lock29,
                                                        hS, hObj, 'UseObj'
   )
   ]
  --[ Unlock( ~lock29, hS ) ]->
   [
   State_0111111111111111111112111111111111111111111111( pd, pcS, pc,
                                                         pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                         cph, ap, ~lock26, ~lock27, ~lock28,
                                                         ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_pd_ap0111111111111111111112111111111111111111111111:
   [
   State_0111111111111111111112111111111111111111111111( pd, pcS, pc,
                                                         pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                         cph, ap, ~lock26, ~lock27, ~lock28,
                                                         ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ Eq( pd, ap ) ]->
   [
   State_01111111111111111111121111111111111111111111111( pd, pcS, pc,
                                                          pcrv, nv, WS, NW, PD, AV, PP, Loc, cc,
                                                          nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                          ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__if_pd_ap0111111111111111111112111111111111111111111111:
   [
   State_0111111111111111111112111111111111111111111111( pd, pcS, pc,
                                                         pcrv, nv, WS, NW, PD, AV, PP, Loc, cc, nmh,
                                                         cph, ap, ~lock26, ~lock27, ~lock28,
                                                         ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ NotEq( pd, ap ) ]->
   [
   State_01111111111111111111121111111111111111111111112( pd, pcS, pc,
                                                          pcrv, nv, WS, NW, PD, AV, PP, Loc, cc,
                                                          nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                          ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_UseObj_ap__hS_01111111111111111111121111111111111111111111111:
   [
   State_01111111111111111111121111111111111111111111111( pd, pcS, pc,
                                                          pcrv, nv, WS, NW, PD, AV, PP, Loc, cc,
                                                          nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                          ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ Event( ), UseObj( ap, hS ) ]->
   [
   State_011111111111111111111211111111111111111111111111( pd, pcS,
                                                           pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                           cc, nmh, cph, ap, ~lock26, ~lock27,
                                                           ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_CmdCPH_ap__cph_011111111111111111111211111111111111111111111111:
   [
   State_011111111111111111111211111111111111111111111111( pd, pcS,
                                                           pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                           cc, nmh, cph, ap, ~lock26, ~lock27,
                                                           ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ Event( ), CmdCPH( ap, cph ) ]->
   [
   State_0111111111111111111112111111111111111111111111111( pd, pcS,
                                                            pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                            cc, nmh, cph, ap, ~lock26, ~lock27,
                                                            ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_CmdNV_ap__nv_0111111111111111111112111111111111111111111111111:
   [
   State_0111111111111111111112111111111111111111111111111( pd, pcS,
                                                            pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                            cc, nmh, cph, ap, ~lock26, ~lock27,
                                                            ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ Event( ), CmdNV( ap, nv ) ]->
   [
   State_01111111111111111111121111111111111111111111111111( pd, pcS,
                                                             pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                             cc, nmh, cph, ap, ~lock26, ~lock27,
                                                             ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_CmdPCRV_ap__pcrv__pc__pcS_01111111111111111111121111111111111111111111111111:
   [
   State_01111111111111111111121111111111111111111111111111( pd, pcS,
                                                             pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                             cc, nmh, cph, ap, ~lock26, ~lock27,
                                                             ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  --[ Event( ), CmdPCRV( ap, pcrv, pc, pcS ) ]->
   [
   State_011111111111111111111211111111111111111111111111111( pd, pcS,
                                                              pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                              cc, nmh, cph, ap, ~lock26, ~lock27,
                                                              ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out__Success_011111111111111111111211111111111111111111111111111:
   [
   State_011111111111111111111211111111111111111111111111111( pd, pcS,
                                                              pc, pcrv, nv, WS, NW, PD, AV, PP, Loc,
                                                              cc, nmh, cph, ap, ~lock26, ~lock27,
                                                              ~lock28, ~lock29, hS, hObj, 'UseObj'
   )
   ]
  -->
   [
   Out( 'Success' ),
   State_0111111111111111111112111111111111111111111111111111( pd,
                                                               pcS, pc, pcrv, nv, WS, NW, PD, AV,
                                                               PP, Loc, cc, nmh, cph, ap, ~lock26,
                                                               ~lock27, ~lock28, ~lock29, hS, hObj,
                                                               'UseObj'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero01111111111111111111121111111111111111111111112:
   [
   State_01111111111111111111121111111111111111111111112( pd, pcS, pc,
                                                          pcrv, nv, WS, NW, PD, AV, PP, Loc, cc,
                                                          nmh, cph, ap, ~lock26, ~lock27, ~lock28,
                                                          ~lock29, hS, hObj, 'UseObj'
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___NVWrite___v_011111111111111111112:
   [ State_011111111111111111112( ), In( <'NVWrite', v> ) ]
  -->
   [ State_0111111111111111111121( v, 'NVWrite' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_nvh0111111111111111111121:
   [ State_0111111111111111111121( v, 'NVWrite' ), Fr( ~lock3 ) ]
  --[ Lock( ~lock3, nvh ) ]->
   [ State_01111111111111111111211( ~lock3, v, 'NVWrite' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___NV___nvh__v01111111111111111111211:
   [ State_01111111111111111111211( ~lock3, v, 'NVWrite' ) ]
  --[ Insert( <'NV', nvh>, v ) ]->
   [ State_011111111111111111112111( ~lock3, v, 'NVWrite' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_nvh011111111111111111112111:
   [ State_011111111111111111112111( ~lock3, v, 'NVWrite' ) ]
  --[ Unlock( ~lock3, nvh ) ]->
   [ State_0111111111111111111121111( ~lock3, v, 'NVWrite' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PCRExtend___v_01111111111111111112:
   [ State_01111111111111111112( ), In( <'PCRExtend', v> ) ]
  -->
   [ State_011111111111111111121( v, 'PCRExtend' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_pcrh011111111111111111121:
   [ State_011111111111111111121( v, 'PCRExtend' ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, pcrh ) ]->
   [ State_0111111111111111111211( ~lock7, v, 'PCRExtend' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PCRV___pcrh__as_pcrv0111111111111111111211:
   [ State_0111111111111111111211( ~lock7, v, 'PCRExtend' ) ]
  --[ IsIn( <'PCRV', pcrh>, pcrv ) ]->
   [ State_01111111111111111112111( pcrv, ~lock7, v, 'PCRExtend' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PCRV___pcrh__as_pcrv0111111111111111111211:
   [ State_0111111111111111111211( ~lock7, v, 'PCRExtend' ) ]
  --[ IsNotSet( <'PCRV', pcrh> ) ]->
   [ State_01111111111111111112112( ~lock7, v, 'PCRExtend' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___pcrUpdateCounter___pcrh__as_pc01111111111111111112111:
   [ State_01111111111111111112111( pcrv, ~lock7, v, 'PCRExtend' ) ]
  --[ IsIn( <'pcrUpdateCounter', pcrh>, pc ) ]->
   [
   State_011111111111111111121111( pc, pcrv, ~lock7, v, 'PCRExtend' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___pcrUpdateCounter___pcrh__as_pc01111111111111111112111:
   [ State_01111111111111111112111( pcrv, ~lock7, v, 'PCRExtend' ) ]
  --[ IsNotSet( <'pcrUpdateCounter', pcrh> ) ]->
   [ State_011111111111111111121112( pcrv, ~lock7, v, 'PCRExtend' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_PCRExtend_pc_011111111111111111121111:
   [
   State_011111111111111111121111( pc, pcrv, ~lock7, v, 'PCRExtend' )
   ]
  --[ Event( ), PCRExtend( pc ) ]->
   [
   State_0111111111111111111211111( pc, pcrv, ~lock7, v, 'PCRExtend' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___pcrUpdateCounter___pcrh___pc______one__0111111111111111111211111:
   [
   State_0111111111111111111211111( pc, pcrv, ~lock7, v, 'PCRExtend' )
   ]
  --[ Insert( <'pcrUpdateCounter', pcrh>, ('one'+pc) ) ]->
   [
   State_01111111111111111112111111( pc, pcrv, ~lock7, v, 'PCRExtend'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PCRV___pcrh__H__pcrv__v__01111111111111111112111111:
   [
   State_01111111111111111112111111( pc, pcrv, ~lock7, v, 'PCRExtend'
   )
   ]
  --[ Insert( <'PCRV', pcrh>, H(<pcrv, v>) ) ]->
   [
   State_011111111111111111121111111( pc, pcrv, ~lock7, v, 'PCRExtend'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_pcrh011111111111111111121111111:
   [
   State_011111111111111111121111111( pc, pcrv, ~lock7, v, 'PCRExtend'
   )
   ]
  --[ Unlock( ~lock7, pcrh ) ]->
   [
   State_0111111111111111111211111111( pc, pcrv, ~lock7, v,
                                       'PCRExtend'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyAuthorize___h__sig__pk__polR_0111111111111111112:
   [
   State_0111111111111111112( ),
   In( <'PolicyAuthorize', h, sig, pk, polR> )
   ]
  -->
   [ State_01111111111111111121( polR, pk, sig, h, 'PolicyAuthorize' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111111111111111121:
   [
   State_01111111111111111121( polR, pk, sig, h, 'PolicyAuthorize' ),
   Fr( ~lock6 )
   ]
  --[ Lock( ~lock6, h ) ]->
   [
   State_011111111111111111211( ~lock6, polR, pk, sig, h,
                                'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd011111111111111111211:
   [
   State_011111111111111111211( ~lock6, polR, pk, sig, h,
                                'PolicyAuthorize'
   )
   ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [
   State_0111111111111111112111( pd, ~lock6, polR, pk, sig, h,
                                 'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd011111111111111111211:
   [
   State_011111111111111111211( ~lock6, polR, pk, sig, h,
                                'PolicyAuthorize'
   )
   ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [
   State_0111111111111111112112( ~lock6, polR, pk, sig, h,
                                 'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_CkSig_sig__pk___pd__polR_0111111111111111112111:
   [
   State_0111111111111111112111( pd, ~lock6, polR, pk, sig, h,
                                 'PolicyAuthorize'
   )
   ]
  --[ Eq( CkSig(sig, pk), <pd, polR> ) ]->
   [
   State_01111111111111111121111( pd, ~lock6, polR, pk, sig, h,
                                  'PolicyAuthorize'
   )
   ]

  /*
  rule (modulo AC) if_CkSig_sig__pk___pd__polR_0111111111111111112111:
     [
     State_0111111111111111112111( pd, ~lock6, polR, pk, sig, h,
                                   'PolicyAuthorize'
     )
     ]
    --[ Eq( z, <pd, polR> ) ]->
     [
     State_01111111111111111121111( pd, ~lock6, polR, pk, sig, h,
                                    'PolicyAuthorize'
     )
     ]
    variants (modulo AC)
    1. pk    = pk.10
       sig   = sig.12
       z     = CkSig(sig.12, pk.10)
    
    2. pk    = PK(x.12)
       sig   = Sig(z.11, x.12)
       z     = z.11
  */

rule (modulo E) else__if_CkSig_sig__pk___pd__polR_0111111111111111112111:
   [
   State_0111111111111111112111( pd, ~lock6, polR, pk, sig, h,
                                 'PolicyAuthorize'
   )
   ]
  --[ NotEq( CkSig(sig, pk), <pd, polR> ) ]->
   [
   State_01111111111111111121112( pd, ~lock6, polR, pk, sig, h,
                                  'PolicyAuthorize'
   )
   ]

  /*
  rule (modulo AC) else__if_CkSig_sig__pk___pd__polR_0111111111111111112111:
     [
     State_0111111111111111112111( pd, ~lock6, polR, pk, sig, h,
                                   'PolicyAuthorize'
     )
     ]
    --[ NotEq( z, <pd, polR> ) ]->
     [
     State_01111111111111111121112( pd, ~lock6, polR, pk, sig, h,
                                    'PolicyAuthorize'
     )
     ]
    variants (modulo AC)
    1. pk    = pk.10
       sig   = sig.12
       z     = CkSig(sig.12, pk.10)
    
    2. pk    = PK(x.12)
       sig   = Sig(z.11, x.12)
       z     = z.11
  */

rule (modulo E) event_Pol__PolicyAuthorize___h__zero___pk__polR__01111111111111111121111:
   [
   State_01111111111111111121111( pd, ~lock6, polR, pk, sig, h,
                                  'PolicyAuthorize'
   )
   ]
  --[ Event( ), Pol( 'PolicyAuthorize', h, zero, <pk, polR> ) ]->
   [
   State_011111111111111111211111( pd, ~lock6, polR, pk, sig, h,
                                   'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__zero___PolicyAuthorize____pk__polR___011111111111111111211111:
   [
   State_011111111111111111211111( pd, ~lock6, polR, pk, sig, h,
                                   'PolicyAuthorize'
   )
   ]
  --[ Insert( <'PolD', h>, H(<zero, 'PolicyAuthorize', pk, polR>) )
  ]->
   [
   State_0111111111111111112111111( pd, ~lock6, polR, pk, sig, h,
                                    'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111111111111112111111:
   [
   State_0111111111111111112111111( pd, ~lock6, polR, pk, sig, h,
                                    'PolicyAuthorize'
   )
   ]
  --[ Unlock( ~lock6, h ) ]->
   [
   State_01111111111111111121111111( pd, ~lock6, polR, pk, sig, h,
                                     'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111111111111121112:
   [
   State_01111111111111111121112( pd, ~lock6, polR, pk, sig, h,
                                  'PolicyAuthorize'
   )
   ]
  --[ Unlock( ~lock6, h ) ]->
   [
   State_011111111111111111211121( pd, ~lock6, polR, pk, sig, h,
                                   'PolicyAuthorize'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicySigned___h__sig__pk__polR_011111111111111112:
   [
   State_011111111111111112( ),
   In( <'PolicySigned', h, sig, pk, polR> )
   ]
  -->
   [ State_0111111111111111121( polR, pk, sig, h, 'PolicySigned' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h0111111111111111121:
   [
   State_0111111111111111121( polR, pk, sig, h, 'PolicySigned' ),
   Fr( ~lock7 )
   ]
  --[ Lock( ~lock7, h ) ]->
   [
   State_01111111111111111211( ~lock7, polR, pk, sig, h,
                               'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd01111111111111111211:
   [
   State_01111111111111111211( ~lock7, polR, pk, sig, h,
                               'PolicySigned'
   )
   ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [
   State_011111111111111112111( pd, ~lock7, polR, pk, sig, h,
                                'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd01111111111111111211:
   [
   State_01111111111111111211( ~lock7, polR, pk, sig, h,
                               'PolicySigned'
   )
   ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [
   State_011111111111111112112( ~lock7, polR, pk, sig, h,
                                'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___NonceTPM___h__as_nt011111111111111112111:
   [
   State_011111111111111112111( pd, ~lock7, polR, pk, sig, h,
                                'PolicySigned'
   )
   ]
  --[ IsIn( <'NonceTPM', h>, nt ) ]->
   [
   State_0111111111111111121111( nt, pd, ~lock7, polR, pk, sig, h,
                                 'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___NonceTPM___h__as_nt011111111111111112111:
   [
   State_011111111111111112111( pd, ~lock7, polR, pk, sig, h,
                                'PolicySigned'
   )
   ]
  --[ IsNotSet( <'NonceTPM', h> ) ]->
   [
   State_0111111111111111121112( pd, ~lock7, polR, pk, sig, h,
                                 'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_CkSig_sig__pk___nt__polR_0111111111111111121111:
   [
   State_0111111111111111121111( nt, pd, ~lock7, polR, pk, sig, h,
                                 'PolicySigned'
   )
   ]
  --[ Eq( CkSig(sig, pk), <nt, polR> ) ]->
   [
   State_01111111111111111211111( nt, pd, ~lock7, polR, pk, sig, h,
                                  'PolicySigned'
   )
   ]

  /*
  rule (modulo AC) if_CkSig_sig__pk___nt__polR_0111111111111111121111:
     [
     State_0111111111111111121111( nt, pd, ~lock7, polR, pk, sig, h,
                                   'PolicySigned'
     )
     ]
    --[ Eq( z, <nt, polR> ) ]->
     [
     State_01111111111111111211111( nt, pd, ~lock7, polR, pk, sig, h,
                                    'PolicySigned'
     )
     ]
    variants (modulo AC)
    1. pk    = pk.11
       sig   = sig.13
       z     = CkSig(sig.13, pk.11)
    
    2. pk    = PK(x.13)
       sig   = Sig(z.12, x.13)
       z     = z.12
  */

rule (modulo E) else__if_CkSig_sig__pk___nt__polR_0111111111111111121111:
   [
   State_0111111111111111121111( nt, pd, ~lock7, polR, pk, sig, h,
                                 'PolicySigned'
   )
   ]
  --[ NotEq( CkSig(sig, pk), <nt, polR> ) ]->
   [
   State_01111111111111111211112( nt, pd, ~lock7, polR, pk, sig, h,
                                  'PolicySigned'
   )
   ]

  /*
  rule (modulo AC) else__if_CkSig_sig__pk___nt__polR_0111111111111111121111:
     [
     State_0111111111111111121111( nt, pd, ~lock7, polR, pk, sig, h,
                                   'PolicySigned'
     )
     ]
    --[ NotEq( z, <nt, polR> ) ]->
     [
     State_01111111111111111211112( nt, pd, ~lock7, polR, pk, sig, h,
                                    'PolicySigned'
     )
     ]
    variants (modulo AC)
    1. pk    = pk.11
       sig   = sig.13
       z     = CkSig(sig.13, pk.11)
    
    2. pk    = PK(x.13)
       sig   = Sig(z.12, x.13)
       z     = z.12
  */

rule (modulo E) event_Pol__PolicySigned___h__pd___pk__polR__01111111111111111211111:
   [
   State_01111111111111111211111( nt, pd, ~lock7, polR, pk, sig, h,
                                  'PolicySigned'
   )
   ]
  --[ Event( ), Pol( 'PolicySigned', h, pd, <pk, polR> ) ]->
   [
   State_011111111111111112111111( nt, pd, ~lock7, polR, pk, sig, h,
                                   'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicySigned____pk__polR___011111111111111112111111:
   [
   State_011111111111111112111111( nt, pd, ~lock7, polR, pk, sig, h,
                                   'PolicySigned'
   )
   ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicySigned', pk, polR>) ) ]->
   [
   State_0111111111111111121111111( nt, pd, ~lock7, polR, pk, sig, h,
                                    'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111111111111121111111:
   [
   State_0111111111111111121111111( nt, pd, ~lock7, polR, pk, sig, h,
                                    'PolicySigned'
   )
   ]
  --[ Unlock( ~lock7, h ) ]->
   [
   State_01111111111111111211111111( nt, pd, ~lock7, polR, pk, sig, h,
                                     'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111111111111211112:
   [
   State_01111111111111111211112( nt, pd, ~lock7, polR, pk, sig, h,
                                  'PolicySigned'
   )
   ]
  --[ Unlock( ~lock7, h ) ]->
   [
   State_011111111111111112111121( nt, pd, ~lock7, polR, pk, sig, h,
                                   'PolicySigned'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyOR___h___ld__rd__01111111111111112:
   [ State_01111111111111112( ), In( <'PolicyOR', h, ld, rd> ) ]
  -->
   [ State_011111111111111121( h, 'PolicyOR', ld, rd ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h011111111111111121:
   [ State_011111111111111121( h, 'PolicyOR', ld, rd ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, h ) ]->
   [ State_0111111111111111211( ~lock7, h, 'PolicyOR', ld, rd ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd0111111111111111211:
   [ State_0111111111111111211( ~lock7, h, 'PolicyOR', ld, rd ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_01111111111111112111( pd, ~lock7, h, 'PolicyOR', ld, rd ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd0111111111111111211:
   [ State_0111111111111111211( ~lock7, h, 'PolicyOR', ld, rd ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_01111111111111112112( ~lock7, h, 'PolicyOR', ld, rd ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_pd_ld01111111111111112111:
   [ State_01111111111111112111( pd, ~lock7, h, 'PolicyOR', ld, rd ) ]
  --[ Eq( pd, ld ) ]->
   [ State_011111111111111121111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__if_pd_ld01111111111111112111:
   [ State_01111111111111112111( pd, ~lock7, h, 'PolicyOR', ld, rd ) ]
  --[ NotEq( pd, ld ) ]->
   [ State_011111111111111121112( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyOR___h__pd___ld__rd__011111111111111121111:
   [ State_011111111111111121111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Event( ), Pol( 'PolicyOR', h, pd, <ld, rd> ) ]->
   [ State_0111111111111111211111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__zero___PolicyOR____ld__rd___0111111111111111211111:
   [ State_0111111111111111211111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Insert( <'PolD', h>, H(<zero, 'PolicyOR', ld, rd>) ) ]->
   [
   State_01111111111111112111111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111111111112111111:
   [
   State_01111111111111112111111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Unlock( ~lock7, h ) ]->
   [
   State_011111111111111121111111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_pd_rd011111111111111121112:
   [ State_011111111111111121112( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Eq( pd, rd ) ]->
   [ State_0111111111111111211121( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__if_pd_rd011111111111111121112:
   [ State_011111111111111121112( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ NotEq( pd, rd ) ]->
   [ State_0111111111111111211122( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyOR___h__pd___ld__rd__0111111111111111211121:
   [ State_0111111111111111211121( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Event( ), Pol( 'PolicyOR', h, pd, <ld, rd> ) ]->
   [
   State_01111111111111112111211( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__zero___PolicyOR____ld__rd___01111111111111112111211:
   [
   State_01111111111111112111211( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Insert( <'PolD', h>, H(<zero, 'PolicyOR', ld, rd>) ) ]->
   [
   State_011111111111111121112111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h011111111111111121112111:
   [
   State_011111111111111121112111( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Unlock( ~lock7, h ) ]->
   [
   State_0111111111111111211121111( pd, ~lock7, h, 'PolicyOR', ld, rd
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111111111111211122:
   [ State_0111111111111111211122( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]
  --[ Unlock( ~lock7, h ) ]->
   [
   State_01111111111111112111221( pd, ~lock7, h, 'PolicyOR', ld, rd )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyNV___h__v_0111111111111112:
   [ State_0111111111111112( ), In( <'PolicyNV', h, v> ) ]
  -->
   [ State_01111111111111121( v, h, 'PolicyNV' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_nvh01111111111111121:
   [ State_01111111111111121( v, h, 'PolicyNV' ), Fr( ~lock9 ) ]
  --[ Lock( ~lock9, nvh ) ]->
   [ State_011111111111111211( ~lock9, v, h, 'PolicyNV' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h011111111111111211:
   [
   State_011111111111111211( ~lock9, v, h, 'PolicyNV' ), Fr( ~lock8 )
   ]
  --[ Lock( ~lock8, h ) ]->
   [ State_0111111111111112111( ~lock8, ~lock9, v, h, 'PolicyNV' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___NV___nvh__as_nv0111111111111112111:
   [ State_0111111111111112111( ~lock8, ~lock9, v, h, 'PolicyNV' ) ]
  --[ IsIn( <'NV', nvh>, nv ) ]->
   [
   State_01111111111111121111( nv, ~lock8, ~lock9, v, h, 'PolicyNV' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___NV___nvh__as_nv0111111111111112111:
   [ State_0111111111111112111( ~lock8, ~lock9, v, h, 'PolicyNV' ) ]
  --[ IsNotSet( <'NV', nvh> ) ]->
   [ State_01111111111111121112( ~lock8, ~lock9, v, h, 'PolicyNV' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd01111111111111121111:
   [
   State_01111111111111121111( nv, ~lock8, ~lock9, v, h, 'PolicyNV' )
   ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [
   State_011111111111111211111( pd, nv, ~lock8, ~lock9, v, h,
                                'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd01111111111111121111:
   [
   State_01111111111111121111( nv, ~lock8, ~lock9, v, h, 'PolicyNV' )
   ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [
   State_011111111111111211112( nv, ~lock8, ~lock9, v, h, 'PolicyNV' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_v_nv011111111111111211111:
   [
   State_011111111111111211111( pd, nv, ~lock8, ~lock9, v, h,
                                'PolicyNV'
   )
   ]
  --[ Eq( v, nv ) ]->
   [
   State_0111111111111112111111( pd, nv, ~lock8, ~lock9, v, h,
                                 'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__if_v_nv011111111111111211111:
   [
   State_011111111111111211111( pd, nv, ~lock8, ~lock9, v, h,
                                'PolicyNV'
   )
   ]
  --[ NotEq( v, nv ) ]->
   [
   State_0111111111111112111112( pd, nv, ~lock8, ~lock9, v, h,
                                 'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyNV___h__pd__v_0111111111111112111111:
   [
   State_0111111111111112111111( pd, nv, ~lock8, ~lock9, v, h,
                                 'PolicyNV'
   )
   ]
  --[ Event( ), Pol( 'PolicyNV', h, pd, v ) ]->
   [
   State_01111111111111121111111( pd, nv, ~lock8, ~lock9, v, h,
                                  'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyNV___v__01111111111111121111111:
   [
   State_01111111111111121111111( pd, nv, ~lock8, ~lock9, v, h,
                                  'PolicyNV'
   )
   ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyNV', v>) ) ]->
   [
   State_011111111111111211111111( pd, nv, ~lock8, ~lock9, v, h,
                                   'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h011111111111111211111111:
   [
   State_011111111111111211111111( pd, nv, ~lock8, ~lock9, v, h,
                                   'PolicyNV'
   )
   ]
  --[ Unlock( ~lock8, h ) ]->
   [
   State_0111111111111112111111111( pd, nv, ~lock8, ~lock9, v, h,
                                    'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_nvh0111111111111112111111111:
   [
   State_0111111111111112111111111( pd, nv, ~lock8, ~lock9, v, h,
                                    'PolicyNV'
   )
   ]
  --[ Unlock( ~lock9, nvh ) ]->
   [
   State_01111111111111121111111111( pd, nv, ~lock8, ~lock9, v, h,
                                     'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111111111112111112:
   [
   State_0111111111111112111112( pd, nv, ~lock8, ~lock9, v, h,
                                 'PolicyNV'
   )
   ]
  --[ Unlock( ~lock8, h ) ]->
   [
   State_01111111111111121111121( pd, nv, ~lock8, ~lock9, v, h,
                                  'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_nvh01111111111111121111121:
   [
   State_01111111111111121111121( pd, nv, ~lock8, ~lock9, v, h,
                                  'PolicyNV'
   )
   ]
  --[ Unlock( ~lock9, nvh ) ]->
   [
   State_011111111111111211111211( pd, nv, ~lock8, ~lock9, v, h,
                                   'PolicyNV'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyPCR___h__v_011111111111112:
   [ State_011111111111112( ), In( <'PolicyPCR', h, v> ) ]
  -->
   [ State_0111111111111121( v, h, 'PolicyPCR' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_pcrh0111111111111121:
   [ State_0111111111111121( v, h, 'PolicyPCR' ), Fr( ~lock11 ) ]
  --[ Lock( ~lock11, pcrh ) ]->
   [ State_01111111111111211( ~lock11, v, h, 'PolicyPCR' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111111111111211:
   [
   State_01111111111111211( ~lock11, v, h, 'PolicyPCR' ),
   Fr( ~lock10 )
   ]
  --[ Lock( ~lock10, h ) ]->
   [ State_011111111111112111( ~lock10, ~lock11, v, h, 'PolicyPCR' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PCRV___pcrh__as_pcrv011111111111112111:
   [ State_011111111111112111( ~lock10, ~lock11, v, h, 'PolicyPCR' ) ]
  --[ IsIn( <'PCRV', pcrh>, pcrv ) ]->
   [
   State_0111111111111121111( pcrv, ~lock10, ~lock11, v, h,
                              'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PCRV___pcrh__as_pcrv011111111111112111:
   [ State_011111111111112111( ~lock10, ~lock11, v, h, 'PolicyPCR' ) ]
  --[ IsNotSet( <'PCRV', pcrh> ) ]->
   [ State_0111111111111121112( ~lock10, ~lock11, v, h, 'PolicyPCR' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd0111111111111121111:
   [
   State_0111111111111121111( pcrv, ~lock10, ~lock11, v, h,
                              'PolicyPCR'
   )
   ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [
   State_01111111111111211111( pd, pcrv, ~lock10, ~lock11, v, h,
                               'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd0111111111111121111:
   [
   State_0111111111111121111( pcrv, ~lock10, ~lock11, v, h,
                              'PolicyPCR'
   )
   ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [
   State_01111111111111211112( pcrv, ~lock10, ~lock11, v, h,
                               'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_v_pcrv01111111111111211111:
   [
   State_01111111111111211111( pd, pcrv, ~lock10, ~lock11, v, h,
                               'PolicyPCR'
   )
   ]
  --[ Eq( v, pcrv ) ]->
   [
   State_011111111111112111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__if_v_pcrv01111111111111211111:
   [
   State_01111111111111211111( pd, pcrv, ~lock10, ~lock11, v, h,
                               'PolicyPCR'
   )
   ]
  --[ NotEq( v, pcrv ) ]->
   [
   State_011111111111112111112( pd, pcrv, ~lock10, ~lock11, v, h,
                                'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyPCR___h__pd__v_011111111111112111111:
   [
   State_011111111111112111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                'PolicyPCR'
   )
   ]
  --[ Event( ), Pol( 'PolicyPCR', h, pd, v ) ]->
   [
   State_0111111111111121111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                 'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyPCR___v__0111111111111121111111:
   [
   State_0111111111111121111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                 'PolicyPCR'
   )
   ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyPCR', v>) ) ]->
   [
   State_01111111111111211111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                  'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___pcrUpdateCounter___pcrh__as_pc01111111111111211111111:
   [
   State_01111111111111211111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                  'PolicyPCR'
   )
   ]
  --[ IsIn( <'pcrUpdateCounter', pcrh>, pc ) ]->
   [
   State_011111111111112111111111( pc, pd, pcrv, ~lock10, ~lock11, v,
                                   h, 'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___pcrUpdateCounter___pcrh__as_pc01111111111111211111111:
   [
   State_01111111111111211111111( pd, pcrv, ~lock10, ~lock11, v, h,
                                  'PolicyPCR'
   )
   ]
  --[ IsNotSet( <'pcrUpdateCounter', pcrh> ) ]->
   [
   State_011111111111112111111112( pd, pcrv, ~lock10, ~lock11, v, h,
                                   'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___pcrUC___h__pc011111111111112111111111:
   [
   State_011111111111112111111111( pc, pd, pcrv, ~lock10, ~lock11, v,
                                   h, 'PolicyPCR'
   )
   ]
  --[ Insert( <'pcrUC', h>, pc ) ]->
   [
   State_0111111111111121111111111( pc, pd, pcrv, ~lock10, ~lock11, v,
                                    h, 'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111111111121111111111:
   [
   State_0111111111111121111111111( pc, pd, pcrv, ~lock10, ~lock11, v,
                                    h, 'PolicyPCR'
   )
   ]
  --[ Unlock( ~lock10, h ) ]->
   [
   State_01111111111111211111111111( pc, pd, pcrv, ~lock10, ~lock11,
                                     v, h, 'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_pcrh01111111111111211111111111:
   [
   State_01111111111111211111111111( pc, pd, pcrv, ~lock10, ~lock11,
                                     v, h, 'PolicyPCR'
   )
   ]
  --[ Unlock( ~lock11, pcrh ) ]->
   [
   State_011111111111112111111111111( pc, pd, pcrv, ~lock10, ~lock11,
                                      v, h, 'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h011111111111112111111112:
   [
   State_011111111111112111111112( pd, pcrv, ~lock10, ~lock11, v, h,
                                   'PolicyPCR'
   )
   ]
  --[ Unlock( ~lock10, h ) ]->
   [
   State_0111111111111121111111121( pd, pcrv, ~lock10, ~lock11, v, h,
                                    'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_pcrh0111111111111121111111121:
   [
   State_0111111111111121111111121( pd, pcrv, ~lock10, ~lock11, v, h,
                                    'PolicyPCR'
   )
   ]
  --[ Unlock( ~lock11, pcrh ) ]->
   [
   State_01111111111111211111111211( pd, pcrv, ~lock10, ~lock11, v, h,
                                     'PolicyPCR'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero011111111111112111112:
   [
   State_011111111111112111112( pd, pcrv, ~lock10, ~lock11, v, h,
                                'PolicyPCR'
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyCpHash___h__cph_01111111111112:
   [ State_01111111111112( ), In( <'PolicyCpHash', h, cph> ) ]
  -->
   [ State_011111111111121( cph, h, 'PolicyCpHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h011111111111121:
   [ State_011111111111121( cph, h, 'PolicyCpHash' ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, h ) ]->
   [ State_0111111111111211( ~lock6, cph, h, 'PolicyCpHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd0111111111111211:
   [ State_0111111111111211( ~lock6, cph, h, 'PolicyCpHash' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_01111111111112111( pd, ~lock6, cph, h, 'PolicyCpHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd0111111111111211:
   [ State_0111111111111211( ~lock6, cph, h, 'PolicyCpHash' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_01111111111112112( ~lock6, cph, h, 'PolicyCpHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyCpHash___h__pd__cph_01111111111112111:
   [ State_01111111111112111( pd, ~lock6, cph, h, 'PolicyCpHash' ) ]
  --[ Event( ), Pol( 'PolicyCpHash', h, pd, cph ) ]->
   [ State_011111111111121111( pd, ~lock6, cph, h, 'PolicyCpHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyCpHash___cph__011111111111121111:
   [ State_011111111111121111( pd, ~lock6, cph, h, 'PolicyCpHash' ) ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyCpHash', cph>) ) ]->
   [ State_0111111111111211111( pd, ~lock6, cph, h, 'PolicyCpHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___cpHash___h__cph0111111111111211111:
   [ State_0111111111111211111( pd, ~lock6, cph, h, 'PolicyCpHash' ) ]
  --[ Insert( <'cpHash', h>, cph ) ]->
   [ State_01111111111112111111( pd, ~lock6, cph, h, 'PolicyCpHash' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111111112111111:
   [ State_01111111111112111111( pd, ~lock6, cph, h, 'PolicyCpHash' )
   ]
  --[ Unlock( ~lock6, h ) ]->
   [ State_011111111111121111111( pd, ~lock6, cph, h, 'PolicyCpHash' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyNameHash___h__nmh_0111111111112:
   [ State_0111111111112( ), In( <'PolicyNameHash', h, nmh> ) ]
  -->
   [ State_01111111111121( nmh, h, 'PolicyNameHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111111111121:
   [ State_01111111111121( nmh, h, 'PolicyNameHash' ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, h ) ]->
   [ State_011111111111211( ~lock6, nmh, h, 'PolicyNameHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd011111111111211:
   [ State_011111111111211( ~lock6, nmh, h, 'PolicyNameHash' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_0111111111112111( pd, ~lock6, nmh, h, 'PolicyNameHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd011111111111211:
   [ State_011111111111211( ~lock6, nmh, h, 'PolicyNameHash' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_0111111111112112( ~lock6, nmh, h, 'PolicyNameHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyNameHash___h__pd__nmh_0111111111112111:
   [ State_0111111111112111( pd, ~lock6, nmh, h, 'PolicyNameHash' ) ]
  --[ Event( ), Pol( 'PolicyNameHash', h, pd, nmh ) ]->
   [ State_01111111111121111( pd, ~lock6, nmh, h, 'PolicyNameHash' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyNameHash___nmh__01111111111121111:
   [ State_01111111111121111( pd, ~lock6, nmh, h, 'PolicyNameHash' ) ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyNameHash', nmh>) ) ]->
   [ State_011111111111211111( pd, ~lock6, nmh, h, 'PolicyNameHash' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___nameHash___h__nmh011111111111211111:
   [ State_011111111111211111( pd, ~lock6, nmh, h, 'PolicyNameHash' )
   ]
  --[ Insert( <'nameHash', h>, nmh ) ]->
   [ State_0111111111112111111( pd, ~lock6, nmh, h, 'PolicyNameHash' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111111112111111:
   [ State_0111111111112111111( pd, ~lock6, nmh, h, 'PolicyNameHash' )
   ]
  --[ Unlock( ~lock6, h ) ]->
   [
   State_01111111111121111111( pd, ~lock6, nmh, h, 'PolicyNameHash' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyCommandCode___h__cc_011111111112:
   [ State_011111111112( ), In( <'PolicyCommandCode', h, cc> ) ]
  -->
   [ State_0111111111121( cc, h, 'PolicyCommandCode' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h0111111111121:
   [ State_0111111111121( cc, h, 'PolicyCommandCode' ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, h ) ]->
   [ State_01111111111211( ~lock6, cc, h, 'PolicyCommandCode' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd01111111111211:
   [ State_01111111111211( ~lock6, cc, h, 'PolicyCommandCode' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_011111111112111( pd, ~lock6, cc, h, 'PolicyCommandCode' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd01111111111211:
   [ State_01111111111211( ~lock6, cc, h, 'PolicyCommandCode' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_011111111112112( ~lock6, cc, h, 'PolicyCommandCode' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyCommandCode___h__pd__cc_011111111112111:
   [ State_011111111112111( pd, ~lock6, cc, h, 'PolicyCommandCode' ) ]
  --[ Event( ), Pol( 'PolicyCommandCode', h, pd, cc ) ]->
   [ State_0111111111121111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyCommandCode___cc__0111111111121111:
   [ State_0111111111121111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyCommandCode', cc>) ) ]->
   [ State_01111111111211111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___commandCode___h__cc01111111111211111:
   [ State_01111111111211111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]
  --[ Insert( <'commandCode', h>, cc ) ]->
   [
   State_011111111112111111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h011111111112111111:
   [
   State_011111111112111111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]
  --[ Unlock( ~lock6, h ) ]->
   [
   State_0111111111121111111( pd, ~lock6, cc, h, 'PolicyCommandCode' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyLocality___h__Loc_01111111112:
   [ State_01111111112( ), In( <'PolicyLocality', h, Loc> ) ]
  -->
   [ State_011111111121( Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h011111111121:
   [ State_011111111121( Loc, h, 'PolicyLocality' ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, h ) ]->
   [ State_0111111111211( ~lock6, Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd0111111111211:
   [ State_0111111111211( ~lock6, Loc, h, 'PolicyLocality' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_01111111112111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd0111111111211:
   [ State_0111111111211( ~lock6, Loc, h, 'PolicyLocality' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_01111111112112( ~lock6, Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyLocality___h__pd__Loc_01111111112111:
   [ State_01111111112111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]
  --[ Event( ), Pol( 'PolicyLocality', h, pd, Loc ) ]->
   [ State_011111111121111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyLocality___Loc__011111111121111:
   [ State_011111111121111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyLocality', Loc>) ) ]->
   [ State_0111111111211111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___commandLocality___h__Loc0111111111211111:
   [ State_0111111111211111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]
  --[ Insert( <'commandLocality', h>, Loc ) ]->
   [ State_01111111112111111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111111112111111:
   [ State_01111111112111111( pd, ~lock6, Loc, h, 'PolicyLocality' ) ]
  --[ Unlock( ~lock6, h ) ]->
   [ State_011111111121111111( pd, ~lock6, Loc, h, 'PolicyLocality' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyPhysicalPresence___h_0111111112:
   [ State_0111111112( ), In( <'PolicyPhysicalPresence', h> ) ]
  -->
   [ State_01111111121( h, 'PolicyPhysicalPresence' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111111121:
   [ State_01111111121( h, 'PolicyPhysicalPresence' ), Fr( ~lock6 ) ]
  --[ Lock( ~lock6, h ) ]->
   [ State_011111111211( ~lock6, h, 'PolicyPhysicalPresence' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd011111111211:
   [ State_011111111211( ~lock6, h, 'PolicyPhysicalPresence' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_0111111112111( pd, ~lock6, h, 'PolicyPhysicalPresence' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd011111111211:
   [ State_011111111211( ~lock6, h, 'PolicyPhysicalPresence' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_0111111112112( ~lock6, h, 'PolicyPhysicalPresence' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyPhysicalPresence___h__pd___NULL__0111111112111:
   [ State_0111111112111( pd, ~lock6, h, 'PolicyPhysicalPresence' ) ]
  --[ Event( ), Pol( 'PolicyPhysicalPresence', h, pd, 'NULL' ) ]->
   [ State_01111111121111( pd, ~lock6, h, 'PolicyPhysicalPresence' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyPhysicalPresence____NULL___01111111121111:
   [ State_01111111121111( pd, ~lock6, h, 'PolicyPhysicalPresence' ) ]
  --[
  Insert( <'PolD', h>, H(<pd, 'PolicyPhysicalPresence', 'NULL'>) )
  ]->
   [ State_011111111211111( pd, ~lock6, h, 'PolicyPhysicalPresence' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isPPRequired___h___SET_011111111211111:
   [ State_011111111211111( pd, ~lock6, h, 'PolicyPhysicalPresence' )
   ]
  --[ Insert( <'isPPRequired', h>, 'SET' ) ]->
   [ State_0111111112111111( pd, ~lock6, h, 'PolicyPhysicalPresence' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111112111111:
   [ State_0111111112111111( pd, ~lock6, h, 'PolicyPhysicalPresence' )
   ]
  --[ Unlock( ~lock6, h ) ]->
   [
   State_01111111121111111( pd, ~lock6, h, 'PolicyPhysicalPresence' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyAuthValue___h_011111112:
   [ State_011111112( ), In( <'PolicyAuthValue', h> ) ]
  -->
   [ State_0111111121( h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h0111111121:
   [ State_0111111121( h, 'PolicyAuthValue' ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, h ) ]->
   [ State_01111111211( ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd01111111211:
   [ State_01111111211( ~lock7, h, 'PolicyAuthValue' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_011111112111( pd, ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd01111111211:
   [ State_01111111211( ~lock7, h, 'PolicyAuthValue' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_011111112112( ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyAuthValue___h__pd___NULL__011111112111:
   [ State_011111112111( pd, ~lock7, h, 'PolicyAuthValue' ) ]
  --[ Event( ), Pol( 'PolicyAuthValue', h, pd, 'NULL' ) ]->
   [ State_0111111121111( pd, ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyAuthValue____NULL___0111111121111:
   [ State_0111111121111( pd, ~lock7, h, 'PolicyAuthValue' ) ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyAuthValue', 'NULL'>) ) ]->
   [ State_01111111211111( pd, ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isAuthValueNeeded___h___SET_01111111211111:
   [ State_01111111211111( pd, ~lock7, h, 'PolicyAuthValue' ) ]
  --[ Insert( <'isAuthValueNeeded', h>, 'SET' ) ]->
   [ State_011111112111111( pd, ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isPasswordNeeded___h___CLEAR_011111112111111:
   [ State_011111112111111( pd, ~lock7, h, 'PolicyAuthValue' ) ]
  --[ Insert( <'isPasswordNeeded', h>, 'CLEAR' ) ]->
   [ State_0111111121111111( pd, ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111111121111111:
   [ State_0111111121111111( pd, ~lock7, h, 'PolicyAuthValue' ) ]
  --[ Unlock( ~lock7, h ) ]->
   [ State_01111111211111111( pd, ~lock7, h, 'PolicyAuthValue' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyPassword___h_01111112:
   [ State_01111112( ), In( <'PolicyPassword', h> ) ]
  -->
   [ State_011111121( h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h011111121:
   [ State_011111121( h, 'PolicyPassword' ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, h ) ]->
   [ State_0111111211( ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd0111111211:
   [ State_0111111211( ~lock7, h, 'PolicyPassword' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_01111112111( pd, ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd0111111211:
   [ State_0111111211( ~lock7, h, 'PolicyPassword' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_01111112112( ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyPassword___h__pd___NULL__01111112111:
   [ State_01111112111( pd, ~lock7, h, 'PolicyPassword' ) ]
  --[ Event( ), Pol( 'PolicyPassword', h, pd, 'NULL' ) ]->
   [ State_011111121111( pd, ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyPassword____NULL___011111121111:
   [ State_011111121111( pd, ~lock7, h, 'PolicyPassword' ) ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyPassword', 'NULL'>) ) ]->
   [ State_0111111211111( pd, ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isPasswordNeeded___h___SET_0111111211111:
   [ State_0111111211111( pd, ~lock7, h, 'PolicyPassword' ) ]
  --[ Insert( <'isPasswordNeeded', h>, 'SET' ) ]->
   [ State_01111112111111( pd, ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___isAuthValueNeeded___h___CLEAR_01111112111111:
   [ State_01111112111111( pd, ~lock7, h, 'PolicyPassword' ) ]
  --[ Insert( <'isAuthValueNeeded', h>, 'CLEAR' ) ]->
   [ State_011111121111111( pd, ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h011111121111111:
   [ State_011111121111111( pd, ~lock7, h, 'PolicyPassword' ) ]
  --[ Unlock( ~lock7, h ) ]->
   [ State_0111111211111111( pd, ~lock7, h, 'PolicyPassword' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyDuplicationSelect___h__cph_0111112:
   [ State_0111112( ), In( <'PolicyDuplicationSelect', h, cph> ) ]
  -->
   [ State_01111121( cph, h, 'PolicyDuplicationSelect' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h01111121:
   [ State_01111121( cph, h, 'PolicyDuplicationSelect' ), Fr( ~lock7 )
   ]
  --[ Lock( ~lock7, h ) ]->
   [ State_011111211( ~lock7, cph, h, 'PolicyDuplicationSelect' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd011111211:
   [ State_011111211( ~lock7, cph, h, 'PolicyDuplicationSelect' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_0111112111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd011111211:
   [ State_011111211( ~lock7, cph, h, 'PolicyDuplicationSelect' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_0111112112( ~lock7, cph, h, 'PolicyDuplicationSelect' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyDuplicationSelect___h__pd__cph_0111112111:
   [ State_0111112111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect' )
   ]
  --[ Event( ), Pol( 'PolicyDuplicationSelect', h, pd, cph ) ]->
   [
   State_01111121111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyDuplicationSelect___cph__01111121111:
   [
   State_01111121111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect' )
   ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyDuplicationSelect', cph>) )
  ]->
   [
   State_011111211111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___cpHash___h__cph011111211111:
   [
   State_011111211111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect' )
   ]
  --[ Insert( <'cpHash', h>, cph ) ]->
   [
   State_0111112111111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___commandCode___h___TPM_CC_Duplicate_0111112111111:
   [
   State_0111112111111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect'
   )
   ]
  --[ Insert( <'commandCode', h>, 'TPM_CC_Duplicate' ) ]->
   [
   State_01111121111111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h01111121111111:
   [
   State_01111121111111( pd, ~lock7, cph, h, 'PolicyDuplicationSelect'
   )
   ]
  --[ Unlock( ~lock7, h ) ]->
   [
   State_011111211111111( pd, ~lock7, cph, h,
                          'PolicyDuplicationSelect'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) in___PolicyNvWritten___h__ws_011112:
   [ State_011112( ), In( <'PolicyNvWritten', h, ws> ) ]
  -->
   [ State_0111121( ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_h0111121:
   [ State_0111121( ws, h, 'PolicyNvWritten' ), Fr( ~lock7 ) ]
  --[ Lock( ~lock7, h ) ]->
   [ State_01111211( ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup___PolD___h__as_pd01111211:
   [ State_01111211( ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ IsIn( <'PolD', h>, pd ) ]->
   [ State_011112111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) else__lookup___PolD___h__as_pd01111211:
   [ State_01111211( ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ IsNotSet( <'PolD', h> ) ]->
   [ State_011112112( ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Pol__PolicyNvWritten___h__pd__ws_011112111:
   [ State_011112111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ Event( ), Pol( 'PolicyNvWritten', h, pd, ws ) ]->
   [ State_0111121111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___PolD___h__H__pd___PolicyNvWritten___ws__0111121111:
   [ State_0111121111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ Insert( <'PolD', h>, H(<pd, 'PolicyNvWritten', ws>) ) ]->
   [ State_01111211111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___checkNVWritten___h___SET_01111211111:
   [ State_01111211111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ Insert( <'checkNVWritten', h>, 'SET' ) ]->
   [ State_011112111111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert___nvWrittenState___h__ws011112111111:
   [ State_011112111111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ Insert( <'nvWrittenState', h>, ws ) ]->
   [ State_0111121111111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_h0111121111111:
   [ State_0111121111111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]
  --[ Unlock( ~lock7, h ) ]->
   [ State_01111211111111( pd, ~lock7, ws, h, 'PolicyNvWritten' ) ]

  /* has exactly the trivial AC variant */

axiom single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

axiom conditional1:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

axiom conditional2:
  "∀ x y #i. (NotEq( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

axiom set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒
        (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

axiom set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

axiom immeadiate_in:
  "∀ t #i.
    (ChannelInEvent( t ) @ #i) ⇒
    (∃ #j.
      (((K( t ) @ #j) ∧ (#j < #i)) ∧
       (∀ #k. (Event( ) @ #k) ⇒ ((#k < #j) ∨ (#i < #k)))) ∧
      (∀ #k t2. (K( t2 ) @ #k) ⇒ (((#k < #j) ∨ (#i < #k)) ∨ (#k = #j))))"

axiom locking:
  "∀ n x np #i #j.
    ((Lock( n, x ) @ #i) ∧ (Lock( np, x ) @ #j)) ⇒
    ((((#i < #j) ∧
       (∃ #k.
         ((((Unlock( n, x ) @ #k) ∧ (#i < #k)) ∧ (#k < #j)) ∧
          (∀ np.1 #l. (Lock( np.1, x ) @ #l) ⇒ (¬((#i < #l) ∧ (#l < #k))))) ∧
         (∀ np.1 #l.
           (Unlock( np.1, x ) @ #l) ⇒ (¬((#i < #l) ∧ (#l < #k)))))) ∨
      (#j < #i)) ∨
     (#i = #j))"

lemma CmdNV:
  all-traces
  "∀ pd nv1 nv2 #i.
    (CmdNV( H(<pd, 'PolicyNV', nv1>), nv2 ) @ #i) ⇒ (nv1 = nv2)"
/*
guarded formula characterizing all counter-examples:
"∃ pd nv1 nv2 #i.
  (CmdNV( H(<pd, 'PolicyNV', nv1>), nv2 ) @ #i) ∧ ¬(nv1 = nv2)"
*/
simplify
solve( State_0111111111111111111112111111111111111111111111111( pd,
                                                                pcS, pc, pcrv, nv2, WS, NW, PD, AV,
                                                                PP, Loc, cc, nmh, cph,
                                                                H(<pd.1, 'PolicyNV', nv1>), ~lock26,
                                                                ~lock27, ~lock28, ~lock29, hS, hObj,
                                                                'UseObj'
       ) ▶₀ #i )
  case event_CmdCPH_ap__cph_011111111111111111111211111111111111111111111111
  solve( Insert( <'NV', nvh>, nv2 ) @ #t2.4 )
    case insert___NV___nvh__v01111111111111111111211
    solve( State_01111111111111111111211( ~lock3, nv2, 'NVWrite'
           ) ▶₀ #t2 )
      case lock_nvh0111111111111111111121
      solve( ((#vr.22 < #vr.49) ∧
              (∃ #k.
                (Unlock( ~lock26, nvh ) @ #k)
               ∧
                (#vr.22 < #k) ∧
                (#k < #vr.49) ∧
                (∀ np #l.
                  (Lock( np, nvh ) @ #l) ⇒ (¬(#vr.22 < #l)) ∨ (¬(#l < #k))) ∧
                (∀ np #l.
                  (Unlock( np, nvh ) @ #l) ⇒ (¬(#vr.22 < #l)) ∨ (¬(#l < #k)))))  ∥
             (#vr.49 < #vr.22) )
        case case_1
        by sorry
      next
        case case_2
        solve( Insert( <'PolD', hS>, H(<pd, 'PolicyNV', nv1>) ) @ #t2.1 )
          case insert___PolD___h__H__pd___PolicyNV___v__01111111111111121111111
          solve( State_01111111111111121111111( pd, nv, ~lock8, ~lock9, nv1,
                                                hS, 'PolicyNV'
                 ) ▶₀ #t2.1 )
            case event_Pol__PolicyNV___h__pd__v_0111111111111112111111
            solve( ((#vr.22 < #vr.72) ∧
                    (∃ #k.
                      (Unlock( ~lock26, nvh ) @ #k)
                     ∧
                      (#vr.22 < #k) ∧
                      (#k < #vr.72) ∧
                      (∀ np #l.
                        (Lock( np, nvh ) @ #l) ⇒ (¬(#vr.22 < #l)) ∨ (¬(#l < #k))) ∧
                      (∀ np #l.
                        (Unlock( np, nvh ) @ #l) ⇒ (¬(#vr.22 < #l)) ∨ (¬(#l < #k)))))  ∥
                   (#vr.72 < #vr.22) )
              case case_1
              by sorry
            next
              case case_2
              solve( ((#vr.25 < #vr.71) ∧
                      (∃ #k.
                        (Unlock( ~lock29, hS ) @ #k)
                       ∧
                        (#vr.25 < #k) ∧
                        (#k < #vr.71) ∧
                        (∀ np #l.
                          (Lock( np, hS ) @ #l) ⇒ (¬(#vr.25 < #l)) ∨ (¬(#l < #k))) ∧
                        (∀ np #l.
                          (Unlock( np, hS ) @ #l) ⇒ (¬(#vr.25 < #l)) ∨ (¬(#l < #k)))))  ∥
                     (#vr.71 < #vr.25) )
                case case_1
                by sorry
              next
                case case_2
                solve( ((#vr.49 < #vr.72) ∧
                        (∃ #k.
                          (Unlock( ~lock3, nvh ) @ #k)
                         ∧
                          (#vr.49 < #k) ∧
                          (#k < #vr.72) ∧
                          (∀ np #l.
                            (Lock( np, nvh ) @ #l) ⇒ (¬(#vr.49 < #l)) ∨ (¬(#l < #k))) ∧
                          (∀ np #l.
                            (Unlock( np, nvh ) @ #l) ⇒ (¬(#vr.49 < #l)) ∨ (¬(#l < #k)))))  ∥
                       (#vr.72 < #vr.49) )
                  case case_1
                  by sorry
                next
                  case case_2
                  solve( Insert( <'pcrUC', hS>, pcS ) @ #t2.2 )
                    case insert___pcrUC___h___zero_011111111111111111111121111111111111
                    solve( State_011111111111111111111121111111111111( ~lock16, nt, hS,
                                                                       'startSession'
                           ) ▶₀ #t2.2 )
                      case insert___isPasswordNeeded___h___CLEAR_01111111111111111111112111111111111
                      solve( ((#vr.25 < #vr.94) ∧
                              (∃ #k.
                                (Unlock( ~lock29, ~n ) @ #k)
                               ∧
                                (#vr.25 < #k) ∧
                                (#k < #vr.94) ∧
                                (∀ np #l.
                                  (Lock( np, ~n ) @ #l) ⇒ (¬(#vr.25 < #l)) ∨ (¬(#l < #k))) ∧
                                (∀ np #l.
                                  (Unlock( np, ~n ) @ #l) ⇒ (¬(#vr.25 < #l)) ∨ (¬(#l < #k)))))  ∥
                             (#vr.94 < #vr.25) )
                        case case_1
                        by sorry
                      next
                        case case_2
                        solve( ((#vr.71 < #vr.94) ∧
                                (∃ #k.
                                  (Unlock( ~lock8, ~n ) @ #k)
                                 ∧
                                  (#vr.71 < #k) ∧
                                  (#k < #vr.94) ∧
                                  (∀ np #l.
                                    (Lock( np, ~n ) @ #l) ⇒ (¬(#vr.71 < #l)) ∨ (¬(#l < #k))) ∧
                                  (∀ np #l.
                                    (Unlock( np, ~n ) @ #l) ⇒ (¬(#vr.71 < #l)) ∨ (¬(#l < #k)))))  ∥
                               (#vr.94 < #vr.71) )
                          case case_1
                          by sorry
                        next
                          case case_2
                          solve( Insert( <'pcrUpdateCounter', pcrh>, pc ) @ #t2.3 )
                            case insert___pcrUpdateCounter___pcrh___pc______one__0111111111111111111211111
                            by sorry
                          next
                            case insert___pcrUpdateCounter___pcrh___zero_011
                            solve( State_011( ) ▶₀ #t2.3 )
                              case insert___PCRV___pcrh__zero01
                              solve( Insert( <'PCRV', pcrh>, pcrv ) @ #t2.4 )
                                case insert___PCRV___pcrh__H__pcrv__v__01111111111111111112111111
                                by sorry
                              next
                                case insert___PCRV___pcrh__zero01
                                solve( State_01( ) ▶₀ #t2.4 )
                                  case insert___NV___nvh__zero0
                                  solve( Insert( <'nvWrittenState', ~n>, WS ) @ #t2.5 )
                                    case insert___nvWrittenState___h__ws011112111111
                                    by sorry
                                  next
                                    case insert___nvWrittenState___h__zero011111111111111111111121111111111111111
                                    solve( State_011111111111111111111121111111111111111( ~lock16.1,
                                                                                          nt, ~n,
                                                                                          'startSession'
                                           ) ▶₀ #t2.5 )
                                      case insert___checkNVWritten___h___CLEAR_01111111111111111111112111111111111111
                                      solve( Insert( <'checkNVWritten', ~n>, NW ) @ #t2.6 )
                                        case insert___checkNVWritten___h___CLEAR_01111111111111111111112111111111111111
                                        solve( State_01111111111111111111112111111111111111( ~lock16.1,
                                                                                             nt, ~n,
                                                                                             'startSession'
                                               ) ▶₀ #t2.6 )
                                          case insert___NonceTPM___h__nt0111111111111111111111211111111111111
                                          solve( Insert( <'isPasswordNeeded', ~n>, PD ) @ #t2.7 )
                                            case insert___isPasswordNeeded___h___CLEAR_01111111111111111111112111111111111
                                            solve( State_01111111111111111111112111111111111( ~lock16.1,
                                                                                              nt,
                                                                                              ~n,
                                                                                              'startSession'
                                                   ) ▶₀ #t2.7 )
                                              case insert___isAuthValueNeeded___h___CLEAR_0111111111111111111111211111111111
                                              solve( Insert( <'isAuthValueNeeded', ~n>, AV
                                                     ) @ #t2.8 )
                                                case insert___isAuthValueNeeded___h___CLEAR_0111111111111111111111211111111111
                                                solve( State_0111111111111111111111211111111111( ~lock16.1,
                                                                                                 nt,
                                                                                                 ~n,
                                                                                                 'startSession'
                                                       ) ▶₀ #t2.8 )
                                                  case insert___isPPRequired___h___CLEAR_011111111111111111111121111111111
                                                  solve( Insert( <'isPPRequired', ~n>, PP
                                                         ) @ #t2.9 )
                                                    case insert___isPPRequired___h___CLEAR_011111111111111111111121111111111
                                                    solve( State_011111111111111111111121111111111( ~lock16.1,
                                                                                                    nt,
                                                                                                    ~n,
                                                                                                    'startSession'
                                                           ) ▶₀ #t2.9 )
                                                      case insert___commandLocality___h__zero01111111111111111111112111111111
                                                      solve( Insert( <'commandLocality', ~n>, Loc
                                                             ) @ #t2.10 )
                                                        case insert___commandLocality___h__Loc0111111111211111
                                                        by sorry
                                                      next
                                                        case insert___commandLocality___h__zero01111111111111111111112111111111
                                                        solve( State_01111111111111111111112111111111( ~lock16.1,
                                                                                                       nt,
                                                                                                       ~n,
                                                                                                       'startSession'
                                                               ) ▶₀ #t2.10 )
                                                          case insert___commandCode___h__zero0111111111111111111111211111111
                                                          solve( Insert( <'commandCode', ~n>, cc
                                                                 ) @ #t2.11 )
                                                            case insert___commandCode___h___TPM_CC_Duplicate_0111112111111
                                                            by sorry
                                                          next
                                                            case insert___commandCode___h__cc01111111111211111
                                                            by sorry
                                                          next
                                                            case insert___commandCode___h__zero0111111111111111111111211111111
                                                            solve( State_0111111111111111111111211111111( ~lock16.1,
                                                                                                          nt,
                                                                                                          ~n,
                                                                                                          'startSession'
                                                                   ) ▶₀ #t2.11 )
                                                              case insert___nameHash___h__zero011111111111111111111121111111
                                                              solve( Insert( <'nameHash', ~n>, nmh
                                                                     ) @ #t2.12 )
                                                                case insert___nameHash___h__nmh011111111111211111
                                                                by sorry
                                                              next
                                                                case insert___nameHash___h__zero011111111111111111111121111111
                                                                solve( State_011111111111111111111121111111( ~lock16.1,
                                                                                                             nt,
                                                                                                             ~n,
                                                                                                             'startSession'
                                                                       ) ▶₀ #t2.12 )
                                                                  case insert___cpHash___h__zero01111111111111111111112111111
                                                                  solve( Insert( <'cpHash', ~n>, cph
                                                                         ) @ #t2.13 )
                                                                    case insert___cpHash___h__cph0111111111111211111
                                                                    by sorry
                                                                  next
                                                                    case insert___cpHash___h__cph011111211111
                                                                    by sorry
                                                                  next
                                                                    case insert___cpHash___h__zero01111111111111111111112111111
                                                                    solve( State_01111111111111111111112111111( ~lock16.1,
                                                                                                                nt,
                                                                                                                ~n,
                                                                                                                'startSession'
                                                                           ) ▶₀ #t2.13 )
                                                                      case insert___PolD___h__zero0111111111111111111111211111
                                                                      solve( Insert( <'PolD', ~n>,
                                                                                     pd
                                                                             ) @ #t2.15 )
                                                                        case insert___PolD___h__H__pd___PolicyAuthValue____NULL___0111111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyCommandCode___cc__0111111111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyCpHash___cph__011111111111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyDuplicationSelect___cph__01111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyLocality___Loc__011111111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyNV___v__01111111111111121111111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyNameHash___nmh__01111111111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyNvWritten___ws__0111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyPCR___v__0111111111111121111111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyPassword____NULL___011111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicyPhysicalPresence____NULL___01111111121111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__pd___PolicySigned____pk__polR___011111111111111112111111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__zero___PolicyAuthorize____pk__polR___011111111111111111211111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__zero___PolicyOR____ld__rd___0111111111111111211111
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__H__zero___PolicyOR____ld__rd___01111111111111112111211
                                                                        by sorry
                                                                      next
                                                                        case insert___PolD___h__zero0111111111111111111111211111
                                                                        solve( State_0111111111111111111111211111( ~lock16.1,
                                                                                                                   nt,
                                                                                                                   ~n,
                                                                                                                   'startSession'
                                                                               ) ▶₀ #t2.14 )
                                                                          case event_SessionBind_nt__h_011111111111111111111121111
                                                                          solve( Insert( <'NV', nvh
                                                                                         >,
                                                                                         nv
                                                                                 ) @ #t2.16 )
                                                                            case insert___NV___nvh__v01111111111111111111211
                                                                            by sorry
                                                                          next
                                                                            case insert___NV___nvh__zero0
                                                                            solve( State_0(
                                                                                   ) ▶₀ #t2.15 )
                                                                              case 0
                                                                              solve( !KU( ~n
                                                                                     ) @ #vk.4 )
                                                                                case out__h__nt_0111111111111111111111211111111111111111
                                                                                solve( Insert( <
                                                                                                'AuthP', 
                                                                                                hObj
                                                                                               >,
                                                                                               H(<
                                                                                                  zero, 
                                                                                                  'PolicyNV', 
                                                                                                  zero
                                                                                                 >)
                                                                                       ) @ #t2.16 )
                                                                                  case insert___AuthP___h__ap011111111111111111111111111
                                                                                  solve( State_011111111111111111111111111( ~lock4,
                                                                                                                            hObj,
                                                                                                                            H(<
                                                                                                                               zero, 
                                                                                                                               'PolicyNV', 
                                                                                                                               zero
                                                                                                                              >),
                                                                                                                            'NewObj'
                                                                                         ) ▶₀ #t2.16 )
                                                                                    case lock_h01111111111111111111111111
                                                                                    solve( ((#vr.108 < #vr.24) ∧
                                                                                            (∃ #k.
                                                                                              (Unlock( ~lock4,
                                                                                                       ~n.1
                                                                                               ) @ #k)
                                                                                             ∧
                                                                                              (#vr.108 < #k) ∧
                                                                                              (#k < #vr.24) ∧
                                                                                              (∀ np
                                                                                                 #l.
                                                                                                (Lock( np,
                                                                                                       ~n.1
                                                                                                 ) @ #l)
                                                                                               ⇒
                                                                                                (¬(#vr.108 < #l)) ∨
                                                                                                (¬(#l < #k))) ∧
                                                                                              (∀ np
                                                                                                 #l.
                                                                                                (Unlock( np,
                                                                                                         ~n.1
                                                                                                 ) @ #l)
                                                                                               ⇒
                                                                                                (¬(#vr.108 < #l)) ∨
                                                                                                (¬(#l < #k)))))  ∥
                                                                                           (#vr.24 < #vr.108) )
                                                                                      case case_1
                                                                                      solve( !KU( ~n.1
                                                                                             ) @ #vk.6 )
                                                                                        case out_h0111111111111111111111111111
                                                                                        solve( (¬(#vr.46 < #k.1))  ∥
                                                                                               (¬(#k.1 < #k)) )
                                                                                          case case_1
                                                                                          solve( (#k =
                                                                                                  #k.1)  ∥
                                                                                                 (#k.1 < #k) )
                                                                                            case case_2
                                                                                            solve( (#vr.46 =
                                                                                                    #k.1)  ∥
                                                                                                   (#k.1 < #vr.46) )
                                                                                              case case_2
                                                                                              solve( (#k.1 =
                                                                                                      #k.3)  ∥
                                                                                                     (#k.3 < #k.1) )
                                                                                                case case_1
                                                                                                solve( (¬(#vr.68 < #k.3))  ∥
                                                                                                       (¬(#k.3 < #k.2)) )
                                                                                                  case case_1
                                                                                                  solve( (#k.2 =
                                                                                                          #k.3)  ∥
                                                                                                         (#k.3 < #k.2) )
                                                                                                    case case_2
                                                                                                    solve( (#vr.68 =
                                                                                                            #k.3)  ∥
                                                                                                           (#k.3 < #vr.68) )
                                                                                                      case case_2
                                                                                                      solve( (#k.3 =
                                                                                                              #k.4)  ∥
                                                                                                             (#k.4 < #k.3) )
                                                                                                        case case_1
                                                                                                        solve( (¬(#vr.68 < #k.4))  ∥
                                                                                                               (¬(#k.4 < #k.2)) )
                                                                                                          case case_1
                                                                                                          solve( (#k.2 =
                                                                                                                  #k.4)  ∥
                                                                                                                 (#k.4 < #k.2) )
                                                                                                            case case_2
                                                                                                            solve( (#vr.68 =
                                                                                                                    #k.4)  ∥
                                                                                                                   (#k.4 < #vr.68) )
                                                                                                              case case_2
                                                                                                              solve( (#k.4 =
                                                                                                                      #k.5)  ∥
                                                                                                                     (#k.5 < #k.4) )
                                                                                                                case case_1
                                                                                                                solve( (#k.3 =
                                                                                                                        #k.4)  ∥
                                                                                                                       (#k.4 < #k.3) )
                                                                                                                  case case_1
                                                                                                                  solve( (#k.4 =
                                                                                                                          #k.5)  ∥
                                                                                                                         (#k.5 < #k.4) )
                                                                                                                    case case_1
                                                                                                                    solve( Unlock( ~lock3,
                                                                                                                                   nvh
                                                                                                                           ) @ #k )
                                                                                                                      case unlock_nvh011111111111111111112111
                                                                                                                      solve( State_011111111111111111112111( ~lock3,
                                                                                                                                                             v,
                                                                                                                                                             'NVWrite'
                                                                                                                             ) ▶₀ #k )
                                                                                                                        case insert___NV___nvh__v01111111111111111111211
                                                                                                                        solve( (#k =
                                                                                                                                #k.5)  ∥
                                                                                                                               (#k.5 < #k) )
                                                                                                                          case case_1
                                                                                                                          solve( Unlock( ~lock9,
                                                                                                                                         nvh
                                                                                                                                 ) @ #k.1 )
                                                                                                                            case unlock_nvh0111111111111112111111111
                                                                                                                            solve( State_0111111111111112111111111( pd,
                                                                                                                                                                    nv,
                                                                                                                                                                    ~lock8,
                                                                                                                                                                    ~lock9,
                                                                                                                                                                    v,
                                                                                                                                                                    h,
                                                                                                                                                                    'PolicyNV'
                                                                                                                                   ) ▶₀ #k.1 )
                                                                                                                              case unlock_h011111111111111211111111
                                                                                                                              solve( (¬(#vr.46 < #k.5))  ∥
                                                                                                                                     (¬(#k.5 < #k)) )
                                                                                                                                case case_1
                                                                                                                                solve( (#t2.15 < #t2.18)  ∥
                                                                                                                                       (#t2.15 =
                                                                                                                                        #t2.18) )
                                                                                                                                  case case_2
                                                                                                                                  solve( (#k =
                                                                                                                                          #k.5)  ∥
                                                                                                                                         (#k.5 < #k) )
                                                                                                                                    case case_2
                                                                                                                                    solve( (#k.1 =
                                                                                                                                            #k.5)  ∥
                                                                                                                                           (#k.5 < #k.1) )
                                                                                                                                      case case_1
                                                                                                                                      solve( (#k.1 =
                                                                                                                                              #k.5)  ∥
                                                                                                                                             (#k.5 < #k.1) )
                                                                                                                                        case case_1
                                                                                                                                        solve( (#t2.14 < #t2.17)  ∥
                                                                                                                                               (#t2.14 =
                                                                                                                                                #t2.17) )
                                                                                                                                          case case_2
                                                                                                                                          solve( (#vr.131 =
                                                                                                                                                  #k.2)  ∥
                                                                                                                                                 (#k.2 < #vr.131) )
                                                                                                                                            case case_1
                                                                                                                                            solve( Unlock( ~lock8,
                                                                                                                                                           ~n
                                                                                                                                                   ) @ #k.2 )
                                                                                                                                              case unlock_h011111111111111211111111
                                                                                                                                              solve( Unlock( ~lock16,
                                                                                                                                                             ~n
                                                                                                                                                     ) @ #k.3 )
                                                                                                                                                case unlock_h01111111111111111111112111111111111111111
                                                                                                                                                solve( State_01111111111111111111112111111111111111111( ~lock16,
                                                                                                                                                                                                        nt,
                                                                                                                                                                                                        ~n,
                                                                                                                                                                                                        'startSession'
                                                                                                                                                       ) ▶₀ #k.3 )
                                                                                                                                                  case out__h__nt_0111111111111111111111211111111111111111
                                                                                                                                                  solve( (¬(#vr.68 < #k.5))  ∥
                                                                                                                                                         (¬(#k.5 < #k.2)) )
                                                                                                                                                    case case_1
                                                                                                                                                    solve( (#k.2 =
                                                                                                                                                            #k.5)  ∥
                                                                                                                                                           (#k.5 < #k.2) )
                                                                                                                                                      case case_2
                                                                                                                                                      solve( (#k.3 =
                                                                                                                                                              #k.5)  ∥
                                                                                                                                                             (#k.5 < #k.3) )
                                                                                                                                                        case case_1
                                                                                                                                                        solve( (#k.3 =
                                                                                                                                                                #k.5)  ∥
                                                                                                                                                               (#k.5 < #k.3) )
                                                                                                                                                          case case_1
                                                                                                                                                          solve( Unlock( ~lock4,
                                                                                                                                                                         ~n.1
                                                                                                                                                                 ) @ #k.4 )
                                                                                                                                                            case unlock_h01111111111111111111111111111
                                                                                                                                                            solve( State_01111111111111111111111111111( ~lock4,
                                                                                                                                                                                                        ~n.1,
                                                                                                                                                                                                        ap,
                                                                                                                                                                                                        'NewObj'
                                                                                                                                                                   ) ▶₀ #k.4 )
                                                                                                                                                              case out_h0111111111111111111111111111
                                                                                                                                                              solve( (#k.4 =
                                                                                                                                                                      #k.5)  ∥
                                                                                                                                                                     (#k.5 < #k.4) )
                                                                                                                                                                case case_1
                                                                                                                                                                solve( !KU( H(<
                                                                                                                                                                               zero, 
                                                                                                                                                                               'PolicyNV', 
                                                                                                                                                                               zero
                                                                                                                                                                              >)
                                                                                                                                                                       ) @ #vk.15 )
                                                                                                                                                                  case cH
                                                                                                                                                                  SOLVED // trace found
                                                                                                                                                                qed
                                                                                                                                                              qed
                                                                                                                                                            qed
                                                                                                                                                          qed
                                                                                                                                                        qed
                                                                                                                                                      qed
                                                                                                                                                    qed
                                                                                                                                                  qed
                                                                                                                                                qed
                                                                                                                                              qed
                                                                                                                                            qed
                                                                                                                                          qed
                                                                                                                                        qed
                                                                                                                                      qed
                                                                                                                                    qed
                                                                                                                                  qed
                                                                                                                                qed
                                                                                                                              qed
                                                                                                                            qed
                                                                                                                          qed
                                                                                                                        qed
                                                                                                                      qed
                                                                                                                    qed
                                                                                                                  qed
                                                                                                                qed
                                                                                                              qed
                                                                                                            qed
                                                                                                          qed
                                                                                                        qed
                                                                                                      qed
                                                                                                    qed
                                                                                                  qed
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    next
                                                                                      case case_2
                                                                                      by sorry
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  next
                                                    case insert___isPPRequired___h___SET_011111111211111
                                                    by sorry
                                                  qed
                                                qed
                                              next
                                                case insert___isAuthValueNeeded___h___CLEAR_01111112111111
                                                by sorry
                                              next
                                                case insert___isAuthValueNeeded___h___SET_01111111211111
                                                by sorry
                                              qed
                                            qed
                                          next
                                            case insert___isPasswordNeeded___h___CLEAR_011111112111111
                                            by sorry
                                          next
                                            case insert___isPasswordNeeded___h___SET_0111111211111
                                            by sorry
                                          qed
                                        qed
                                      next
                                        case insert___checkNVWritten___h___SET_01111211111
                                        by sorry
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case insert___pcrUC___h__pc011111111111112111111111
                    by sorry
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case insert___NV___nvh__zero0
    by sorry
  qed
qed

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup___AuthP___hObj__as_ap011111111111111111111211111' has unbound variables: 
    ap
  
  rule `lookup___cpHash___hS__as_cph0111111111111111111112111111' has unbound variables: 
    cph
  
  rule `lookup___nameHash___hS__as_nmh01111111111111111111121111111' has unbound variables: 
    nmh
  
  rule `lookup___commandCode___hS__as_cc011111111111111111111211111111' has unbound variables: 
    cc
  
  rule `lookup___commandLocality___hS__as_Loc0111111111111111111112111111111' has unbound variables: 
    Loc
  
  rule `lookup___isPPRequired___hS__as_PP01111111111111111111121111111111' has unbound variables: 
    PP
  
  rule `lookup___isAuthValueNeeded___hS__as_AV011111111111111111111211111111111' has unbound variables: 
    AV
  
  rule `lookup___isPasswordNeeded___hS__as_PD0111111111111111111112111111111111' has unbound variables: 
    PD
  
  rule `lookup___checkNVWritten___hS__as_NW01111111111111111111121111111111111' has unbound variables: 
    NW
  
  rule `lookup___nvWrittenState___hS__as_WS011111111111111111111211111111111111' has unbound variables: 
    WS
  
  rule `lookup___NV___nvh__as_nv0111111111111111111112111111111111111' has unbound variables: 
    nv
  
  rule `lookup___PCRV___pcrh__as_pcrv01111111111111111111121111111111111111' has unbound variables: 
    pcrv
  
  rule `lookup___pcrUpdateCounter___pcrh__as_pc011111111111111111111211111111111111111' has unbound variables: 
    pc
  
  rule `lookup___pcrUC___hS__as_pcS0111111111111111111112111111111111111111' has unbound variables: 
    pcS
  
  rule `lookup___PolD___hS__as_pd01111111111111111111121111111111111111111' has unbound variables: 
    pd
  
  rule `lookup___PCRV___pcrh__as_pcrv0111111111111111111211' has unbound variables: 
    pcrv
  
  rule `lookup___pcrUpdateCounter___pcrh__as_pc01111111111111111112111' has unbound variables: 
    pc
  
  rule `lookup___PolD___h__as_pd011111111111111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd01111111111111111211' has unbound variables: 
    pd
  
  rule `lookup___NonceTPM___h__as_nt011111111111111112111' has unbound variables: 
    nt
  
  rule `lookup___PolD___h__as_pd0111111111111111211' has unbound variables: 
    pd
  
  rule `lookup___NV___nvh__as_nv0111111111111112111' has unbound variables: 
    nv
  
  rule `lookup___PolD___h__as_pd01111111111111121111' has unbound variables: 
    pd
  
  rule `lookup___PCRV___pcrh__as_pcrv011111111111112111' has unbound variables: 
    pcrv
  
  rule `lookup___PolD___h__as_pd0111111111111121111' has unbound variables: 
    pd
  
  rule `lookup___pcrUpdateCounter___pcrh__as_pc01111111111111211111111' has unbound variables: 
    pc
  
  rule `lookup___PolD___h__as_pd0111111111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd011111111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd01111111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd0111111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd011111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd01111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd0111111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd011111211' has unbound variables: 
    pd
  
  rule `lookup___PolD___h__as_pd01111211' has unbound variables: 
    pd

sorts:
  rule `lookup___PolD___hS__as_pd01111111111111111111121111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `unlock_nvh011111111111111111111211111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `unlock_pcrh0111111111111111111112111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `unlock_hObj01111111111111111111121111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `unlock_hS011111111111111111111211111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `if_pd_ap0111111111111111111112111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `else__if_pd_ap0111111111111111111112111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `event_UseObj_ap__hS_01111111111111111111121111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `event_CmdCPH_ap__cph_011111111111111111111211111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `event_CmdNV_ap__nv_0111111111111111111112111111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `event_CmdPCRV_ap__pcrv__pc__pcS_01111111111111111111121111111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `out__Success_011111111111111111111211111111111111111111111111111' clashing sorts, casings, or multiplicities:
    1. PD, pd
  
  rule `Zero01111111111111111111121111111111111111111111112' clashing sorts, casings, or multiplicities:
    1. PD, pd
*/

end